<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>夏至未至</title>
  <subtitle>一入编程深似海，从此妹子是路人</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-04T09:41:48.514Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>CC</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue.js开发坏境搭建</title>
    <link href="http://yoursite.com/2017/07/12/vue-js%E5%BC%80%E5%8F%91%E5%9D%8F%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2017/07/12/vue-js开发坏境搭建/</id>
    <published>2017-07-12T08:51:49.000Z</published>
    <updated>2017-07-04T09:41:48.514Z</updated>
    
    <content type="html"><![CDATA[<p>Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。</p>
<p>Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。</p>
<a id="more"></a>
<h1 id="vue-js开发环境搭建"><a href="#vue-js开发环境搭建" class="headerlink" title="vue.js开发环境搭建"></a>vue.js开发环境搭建</h1><h3 id="1-安装Node-js-http-www-runoob-com-nodejs-nodejs-install-setup-html"><a href="#1-安装Node-js-http-www-runoob-com-nodejs-nodejs-install-setup-html" class="headerlink" title="1.安装Node.js(http://www.runoob.com/nodejs/nodejs-install-setup.html)"></a>1.安装<a href="http://lib.csdn.net/base/nodejs" title="Node.js知识库" target="_blank" rel="external">Node.js</a>(<a href="http://www.runoob.com/nodejs/nodejs-install-setup.html" target="_blank" rel="external">http://www.runoob.com/nodejs/nodejs-install-setup.html</a>)</h3><h3 id="2-基于node-js-利用淘宝npm镜像安装相关依赖"><a href="#2-基于node-js-利用淘宝npm镜像安装相关依赖" class="headerlink" title="2.基于node.js,利用淘宝npm镜像安装相关依赖"></a>2.基于<a href="http://lib.csdn.net/base/nodejs" title="Node.js知识库" target="_blank" rel="external">node.js</a>,利用淘宝npm镜像安装相关依赖</h3><p> 在cmd里直接输入：npm install -g cnpm –registry=<a href="https://registry.npm.taobao.org/" target="_blank" rel="external">https://registry.npm.taobao.org</a>，回车，等待安装…</p>
<h3 id="3-安装全局vue-cli脚手架-用于帮助搭建所需的模板框架"><a href="#3-安装全局vue-cli脚手架-用于帮助搭建所需的模板框架" class="headerlink" title="3.安装全局vue-cli脚手架,用于帮助搭建所需的模板框架"></a>3.安装全局vue-cli脚手架,用于帮助搭建所需的模板框架</h3><p>在cmd里 1)输入：cnpm install -g vue-cli，回车，等待安装…</p>
<pre><code>2).输入：vue，回车，若出现vue信息说明表示成功
</code></pre><h3 id="4-创建项目"><a href="#4-创建项目" class="headerlink" title="4.创建项目"></a>4.创建项目</h3><p>在cmd里输入：vue init webpack vue_test(项目文件夹名)，回车，等待一小会儿，依次出现‘<a href="http://lib.csdn.net/base/git" title="Git知识库" target="_blank" rel="external">Git</a>’下的项，可按下图操作</p>
<p><img src="http://images2015.cnblogs.com/blog/1000531/201611/1000531-20161104114221752-1894187307.png" alt=""></p>
<h3 id="5-安装依赖"><a href="#5-安装依赖" class="headerlink" title="5.安装依赖"></a>5.安装依赖</h3><p>在cmd里  1).输入：cd vue_test（项目名），回车，进入到具体项目文件夹</p>
<pre><code>2).输入：cnpm install，回车，等待一小会儿
</code></pre><p>回到项目文件夹，会发现项目结构里，多了一个node_modules文件夹（该文件里的内容就是之前安装的依赖）</p>
<p>基于脚手架创建的默认项目结构如下图所示：</p>
<p><img src="http://images2015.cnblogs.com/blog/1000531/201611/1000531-20161104120244799-2006728410.png" alt=""></p>
<h3 id="6-测试环境是否搭建成功"><a href="#6-测试环境是否搭建成功" class="headerlink" title="6.测试环境是否搭建成功"></a>6.<a href="http://lib.csdn.net/base/softwaretest" title="软件测试知识库" target="_blank" rel="external">测试</a>环境是否搭建成功</h3><p><strong>方法1：在cmd里输入：cnpm run dev</strong></p>
<p><strong>方法2：在浏览里输入：localhost:8080(默认端口为8080) </strong></p>
<p>运行起来后的效果如下图所示：</p>
<p><img src="http://images2015.cnblogs.com/blog/1000531/201611/1000531-20161104121102221-395461091.png" alt=""></p>
<p>参照原文：<a href="http://blog.csdn[.NET](http://lib.csdn.net/base/dotnet" target="_blank" rel="external">http://blog.csdn[.NET](http://lib.csdn.net/base/dotnet</a> “.NET知识库”)/luckylqh/article/details/52863026</p>
<h4 id="注：安装过程中的坑"><a href="#注：安装过程中的坑" class="headerlink" title="注：安装过程中的坑"></a>注：安装过程中的坑</h4><p><strong>执行cnpm run dev时候报以下错误</strong></p>
<blockquote>
<p>To use this template, you must update following to modules:    npm: 2.15.1 should be &gt;= 3.0.0<br>解：cmd 中执行 </p>
<p>把npm升级一下就可以了，npm install npm@latest -g 这句命令行就是升级到最新版的</p>
</blockquote>
<p><strong> 原文地址：<a href="http://blog.csdn.NET/luckylqh/article/details/52863026" target="_blank" rel="external">http://blog.csdn.NET/luckylqh/article/details/52863026</a> </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Vue.js（读音 /vjuː/, 类似于 view） 是一套构建用户界面的 渐进式框架。与其他重量级框架不同的是，Vue 采用自底向上增量开发的设计。Vue 的核心库只关注视图层，并且非常容易学习，非常容易与其它库或已有项目整合。另一方面，Vue 完全有能力驱动采用单文件组件和 Vue 生态系统支持的库开发的复杂单页应用。&lt;/p&gt;
&lt;p&gt;Vue.js 的目标是通过尽可能简单的 API 实现响应的数据绑定和组合的视图组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>常见布局</title>
    <link href="http://yoursite.com/2017/06/12/%E7%A7%BB%E5%8A%A8Web%E5%BC%80%E5%8F%91%E4%B8%AD%E7%9A%84%E5%B8%B8%E8%A7%81%E5%B8%83%E5%B1%80%E6%96%B9%E5%BC%8F%E5%8F%8A%E4%B8%80%E4%BA%9B%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2017/06/12/移动Web开发中的常见布局方式及一些常见问题/</id>
    <published>2017-06-12T09:47:49.000Z</published>
    <updated>2017-06-15T04:11:13.904Z</updated>
    
    <content type="html"><![CDATA[<p>目前针对web前端页面的设计主要分为pc端和移动端页面，针对不同的页面我们可能会采取不同的布局格式，在整个布局的选择上，没有一成不变的，也没有任何一种布局能够满足各个方面的需要，在众多的布局方式中，我这边主要针对以下几种布局方式简单的发表一下个人的看法。</p>
<a id="more"></a>
<h2 id="一、流式布局"><a href="#一、流式布局" class="headerlink" title="一、流式布局"></a>一、流式布局</h2><h3 id="1-1-什么是流式布局"><a href="#1-1-什么是流式布局" class="headerlink" title="1.1 什么是流式布局"></a>1.1 什么是流式布局</h3><blockquote>
<p>流式布局就是百分比布局，通过盒子的宽度设置成百分比来根据屏幕的宽度来进行伸缩，不受固定像素的限制，内容向两侧填充，同时会设定最小宽度和最大宽度，适用于图片比较多的首页、门户、电商等。</p>
</blockquote>
<p>在这里我们以京东的M站为例进行说明：</p>
<div class="image-package"><img src="http://upload-images.jianshu.io/upload_images/4482400-2b608551fead622a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><br><div class="image-caption">top.png</div>

<p></p></div><p></p>
<div class="image-package"><img src="http://upload-images.jianshu.io/upload_images/4482400-8c5716e275322263.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><br><div class="image-caption">nav.png</div>

<p></p></div><p></p>
<div class="image-package"><img src="http://upload-images.jianshu.io/upload_images/4482400-f56df7bfbe811978.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><br><div class="image-caption">navs.png</div>

<p></p></div><p></p>
<p>可以看到，在京东各个模块的主容器中，都设置了最大最小宽度和宽度100%，而在导航区块中，由于一行有5个小区块，所以设置了宽度为20%，使得小区块也能达到自适应的效果。</p>
<h3 id="1-2-viewport"><a href="#1-2-viewport" class="headerlink" title="1.2 viewport"></a>1.2 viewport</h3><blockquote>
<p>在移动端用来承载网页的这个区域就是我们的视觉窗口<code>viewport</code>，这个区域可以设置高度宽度，可以按比例放大缩小，而且能设置是否允许用户自行缩放。</p>
</blockquote>
<div class="image-package"><img src="http://upload-images.jianshu.io/upload_images/4482400-66a102b49c8b3e35.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><br><div class="image-caption">viewport.jpg</div>

<p></p></div><p></p>
<ul>
<li><strong>width</strong>：设置的是<code>viewport</code>宽度，可以设置<code>device-width</code>特殊值。</li>
<li><strong>initial-scale</strong>：初始缩放比，大于0的数字，一般设置为1.0。</li>
<li><strong>maximum-scale</strong>：最大缩放比，大于0的数字。</li>
<li><strong>minimum-scale</strong>：最小缩放比，大于0的数字。</li>
<li><p><strong>user-scalable</strong>：用户是否可以缩放，yes或no（1或0）。</p>
<!--视口标签通可以使用 meta:vp + tab 来快速生成，通常我们可以设置为下边这样。-->
<meta name="viewport" content="width=device-width,initial-scale=1.0,user-scalable=0">

</li>
</ul>
<h3 id="1-3-移动端常见事件"><a href="#1-3-移动端常见事件" class="headerlink" title="1.3 移动端常见事件"></a>1.3 移动端常见事件</h3><h4 id="1-3-1-touch事件"><a href="#1-3-1-touch事件" class="headerlink" title="1.3.1 touch事件"></a>1.3.1 touch事件</h4><ul>
<li><strong>touchstart</strong>：当手指触碰屏幕时候发生。不管当前有多少只手指。</li>
<li><strong>touchmove</strong>：当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用<code>event</code>的<code>preventDefault()</code>可以阻止默认情况的发生：阻止页面滚动。</li>
<li><strong>touchend</strong>：当手指离开屏幕时触发。</li>
<li><strong>touchcancel</strong>：系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面<code>alert()</code>一个提示框，此时会触发该事件，这个事件比较少用。</li>
</ul>
<blockquote>
<p>触摸事件的响应顺序：</p>
<p>ontouchstart –&gt; ontouchmove –&gt; ontouchend –&gt; onclick(300ms延时)。</p>
</blockquote>
<h4 id="1-3-2-event事件"><a href="#1-3-2-event事件" class="headerlink" title="1.3.2 event事件"></a>1.3.2 event事件</h4><ul>
<li><strong>originalEvent</strong>：（原生事件）是<code>jquery</code>封装的事件。</li>
<li><strong>targetTouches</strong>：目标元素的所有当前触摸。</li>
<li><strong>changedTouches</strong>：页面上最新更改的所有触摸。</li>
<li><strong>touches</strong>：页面上的所有触摸。注意：在<code>touchend</code>事件的时候<code>event</code>只会记录<code>changedtouches</code>。</li>
</ul>
<h2 id="二、响应式开发"><a href="#二、响应式开发" class="headerlink" title="二、响应式开发"></a>二、响应式开发</h2><h3 id="2-1-响应式开发简介"><a href="#2-1-响应式开发简介" class="headerlink" title="2.1 响应式开发简介"></a>2.1 响应式开发简介</h3><h4 id="2-1-1-什么是响应式开发"><a href="#2-1-1-什么是响应式开发" class="headerlink" title="2.1.1 什么是响应式开发"></a>2.1.1 什么是响应式开发</h4><blockquote>
<p>在移动互联日益成熟的时候，我们在桌面浏览器上开发的网页已经无法满足移动设备的阅读。</p>
<p>通常的做法是针对移动端单独做一套特定的版本。</p>
<p>但是如果终端越来越多那么你需要开发的版本就会越来越多（大屏移动设备普及）。</p>
<p>那么<code>Ethan Marcotte</code>在2010年5月份提出的一个概念，简而言之，就是一个网站能够兼容多个终端。</p>
</blockquote>
<h4 id="2-1-2-响应式开发的前景"><a href="#2-1-2-响应式开发的前景" class="headerlink" title="2.1.2 响应式开发的前景"></a>2.1.2 响应式开发的前景</h4><blockquote>
<p>现在的移动设备屏幕越来越大。</p>
<p>越来越多的设计师也采用了这种设计。</p>
<p>在新建站的一些网站现在普遍采用的响应式开发。</p>
<p>那么在前端开发当中也是一项必备的技能。</p>
</blockquote>
<h4 id="2-1-3-响应式开发的原理"><a href="#2-1-3-响应式开发的原理" class="headerlink" title="2.1.3 响应式开发的原理"></a>2.1.3 响应式开发的原理</h4><blockquote>
<p>CSS3中的<code>Media Query</code>（媒介查询），通过查询<code>screen</code>的宽度来指定某个宽度区间的网页布局。</p>
</blockquote>
<ul>
<li>超小屏幕：768px以下（移动设备）。</li>
<li>小屏设备：768px-992px。</li>
<li>中等屏幕：992px-1200px。</li>
<li>宽屏设备：1200px以上。</li>
</ul>
<h3 id="2-2-Bootstrap框架"><a href="#2-2-Bootstrap框架" class="headerlink" title="2.2 Bootstrap框架"></a>2.2 Bootstrap框架</h3><h4 id="2-2-1-Bootstrap简介"><a href="#2-2-1-Bootstrap简介" class="headerlink" title="2.2.1 Bootstrap简介"></a>2.2.1 Bootstrap简介</h4><ul>
<li><a href="http://getbootstrap.com" target="_blank" rel="external">官方网站</a></li>
<li><a href="http://www.bootcss.com/" target="_blank" rel="external">Bootstrap中文网</a></li>
<li>它是由<code>Twitter</code>的设计师<code>Mark Otto</code>和<code>Jacob Thornton</code>合作开发，是一个<code>CSS/HTML</code>框架。它提供了优雅的<code>HTML</code>和<code>CSS</code>规范，它即是由动态<code>CSS</code>语言<code>Less</code>写成。</li>
<li><code>Bootstrap</code>是基于<code>HTML5</code>和<code>CSS3</code>开发的，它在<code>jQuery</code>的基础上进行了更为个性化和人性化的完善，形成一套自己独有的网站风格，并兼容大部分<code>jQuery</code>插件。</li>
<li><code>Bootstrap</code>中包含了丰富的<code>Web</code>组件，根据这些组件，可以快速的搭建一个漂亮、功能完备的网站。其中包括以下组件：下拉菜单、按钮组、按钮下拉菜单、导航、导航条、路径导航、分页、排版、缩略图、警告对话框、进度条、媒体对象等。</li>
</ul>
<h4 id="2-2-2-Bootstrap常用样式"><a href="#2-2-2-Bootstrap常用样式" class="headerlink" title="2.2.2 Bootstrap常用样式"></a>2.2.2 Bootstrap常用样式</h4><ul>
<li><p><strong>container类</strong>：用于定义一个固定宽度且居中的版心。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"topbar"</span>&gt;</div><div class="line">  &lt;div class=<span class="string">"container"</span>&gt;</div><div class="line">    &lt;!--</div><div class="line">      此处的代码会显示在一个固定宽度且居中的容器中</div><div class="line">      该容器的宽度会跟随屏幕的变化而变化</div><div class="line">    --&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>栅格系统</strong>：<code>Bootstrap</code>中定义了一套响应式的网格系统，其使用方式就是将一个容器划分成12列，然后通过<code>col-xx-xx</code>的类名控制每一列的占比。</p>
<ol>
<li><p><strong>row类</strong>：</p>
<ul>
<li>因为每一个列默认有一个15px的左右外边距。</li>
<li><p><code>row</code>类的一个作用就是通过左右-15px屏蔽掉这个边距。</p>
<div class="container"><br>  <div class="row"></div><br></div>
</li>
</ul>
</li>
<li><p><strong>col-xx-x类</strong>：</p>
<ul>
<li>第一个连接符后边写屏幕尺寸，有<code>xs</code>超小屏幕 手机(&lt;768px)、<code>sm</code>小屏幕 平板 (≥768px)、<code>md</code>中等屏幕 桌面显示器(≥992px)、<code>lg</code>大屏幕 大桌面显示器 (≥1200px)四种。</li>
<li><p>第二个连接符后边表示对应的份数，占12份中的几份。</p>
<div class="row"><br>  <div class="col-md-2 text-center"></div><br>  <div class="col-md-5 text-center"></div><br>  <div class="col-md-2 text-center"></div><br>  <div class="col-md-3 text-center"></div><br></div>
</li>
</ul>
</li>
</ol>
</li>
<li><p><strong>hidden类</strong>：设置在不同的屏幕下隐藏。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div class=<span class="string">"hidden-xs,hidden-sm,hidden-md,hidden-lg"</span>&gt;</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>text-xx类</strong>：设置文字的对齐方式。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">text-center     文本居中</div><div class="line">text-left         文本左对齐</div><div class="line">text-right     文本右对齐</div></pre></td></tr></table></figure>
</li>
<li><p><strong>pull-xx类</strong>：设置浮动。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">pull-left         左浮动类</div><div class="line">pull-right     右浮动类</div></pre></td></tr></table></figure>
</li>
<li><p><strong>center-block类</strong>：让一个固定宽度的元素居中。</p>
</li>
</ul>
<h4 id="2-2-3-字体图标"><a href="#2-2-3-字体图标" class="headerlink" title="2.2.3 字体图标"></a>2.2.3 字体图标</h4><ul>
<li><p>字体图标：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">@font-face &#123;</div><div class="line">  font-family: <span class="string">'XXX'</span>;</div><div class="line">  src: url(<span class="string">'../font/MiFie-Web-Font.eot'</span>) format(<span class="string">'embedded-opentype'</span>), </div><div class="line">  url(<span class="string">'../font/MiFie-Web-Font.svg'</span>) format(<span class="string">'svg'</span>), </div><div class="line">  url(<span class="string">'../font/MiFie-Web-Font.ttf'</span>) format(<span class="string">'truetype'</span>), </div><div class="line">  url(<span class="string">'../font/MiFie-Web-Font.woff'</span>) format(<span class="string">'woff'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>字体文件格式：</p>
<ul>
<li><code>eot</code>：<code>embedded-opentype</code></li>
<li><code>svg</code>：<code>svg</code></li>
<li><code>ttf</code>：<code>truetype</code></li>
<li><code>woff</code>：<code>woff</code></li>
</ul>
</li>
</ul>
<h4 id="2-2-4-轮播图插件-Carousel"><a href="#2-2-4-轮播图插件-Carousel" class="headerlink" title="2.2.4 轮播图插件 Carousel"></a>2.2.4 轮播图插件 Carousel</h4><ul>
<li><p>基本的轮播图实现：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">&lt;!-- </div><div class="line">  以下容器就是整个轮播图组件的整体，</div><div class="line">  注意该盒子必须加上 class=<span class="string">"carousel slide"</span> data-ride=<span class="string">"carousel"</span> 表示当前是一个轮播图</div><div class="line">  bootstrap.js会自动为当前元 素添加图片轮播的特效</div><div class="line">--&gt;</div><div class="line">&lt;div id=<span class="string">"轮播图的ID"</span> class=<span class="string">"carousel slide"</span> data-ride=<span class="string">"carousel"</span>&gt;</div><div class="line">  &lt;!-- ol标签是图片轮播的控制点 --&gt;</div><div class="line">  &lt;ol class=<span class="string">"carousel-indicators"</span>&gt;</div><div class="line">    &lt;!-- </div><div class="line">      每一个li就是一个单独的控制点</div><div class="line">        data-target属性就是指定当前控制点控制的是哪一个轮播图，其目的是如果界面上有多个轮播图，便于区分到底控制哪一个</div><div class="line">        data-slide-to属性是指当前的li元素绑定的是第几个轮播项</div><div class="line">      注意，默认必须给其中某个li加上active，展示的时候就是焦点项目</div><div class="line">    --&gt;</div><div class="line">    &lt;li data-target=<span class="string">"#轮播图的ID"</span> data-slide-to=<span class="string">"0"</span> class=<span class="string">"active"</span>&gt;&lt;/li&gt;</div><div class="line">    &lt;li data-target=<span class="string">"#轮播图的ID"</span> data-slide-to=<span class="string">"1"</span>&gt;&lt;/li&gt;</div><div class="line">    &lt;!-- ...更多的 --&gt;</div><div class="line">  &lt;/ol&gt;</div><div class="line">  &lt;!-- </div><div class="line">    .carousel-inner是所有轮播项的容器盒子，</div><div class="line">    注意role=<span class="string">"listbox"</span>代表当前div是一个列表盒子，作用就是给当前div添加一个语义</div><div class="line">  --&gt;</div><div class="line">  &lt;div class=<span class="string">"carousel-inner"</span> role=<span class="string">"listbox"</span>&gt;</div><div class="line">    &lt;!-- 每一个.item就是单个轮播项目，注意默认要给第一个轮播项目加上active，表示为焦点 --&gt;</div><div class="line">    &lt;div class=<span class="string">"item active"</span>&gt;</div><div class="line">      &lt;!-- 轮播项目中展示的图片 --&gt;</div><div class="line">      ![](example.jpg)</div><div class="line">      &lt;div class=<span class="string">"carousel-caption"</span>&gt;</div><div class="line">        &lt;!-- 标题或说明性文字，如果不需要，直接删除当前div.carousel-caption --&gt;</div><div class="line">      &lt;/div&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;div class=<span class="string">"item"</span>&gt;</div><div class="line">      &lt;!-- ... --&gt;</div><div class="line">    &lt;/div&gt;</div><div class="line">    &lt;!-- ... --&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">  &lt;!-- 图片轮播上左右两个控制按钮，分别点击可以滚动到上一张和下一张 --&gt;</div><div class="line">  &lt;!-- 此处需要注意的是 该a链接的href属性必须指向需要控制的轮播图ID --&gt;</div><div class="line">  &lt;!-- 另外a链接中的data-slide=<span class="string">"prev"</span>代表点击该链接会滚到上一张，如果设置为next的话则相反 --&gt;</div><div class="line">  &lt;a class=<span class="string">"left carousel-control"</span> href=<span class="string">"#轮播图的ID"</span> role=<span class="string">"button"</span> data-slide=<span class="string">"prev"</span>&gt;</div><div class="line">    &lt;span class=<span class="string">"glyphicon glyphicon-chevron-left"</span> aria-hidden=<span class="string">"true"</span>&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=<span class="string">"sr-only"</span>&gt;上一张&lt;/span&gt;</div><div class="line">  &lt;/a&gt;</div><div class="line">  &lt;a class=<span class="string">"right carousel-control"</span> href=<span class="string">"#轮播图的ID"</span> role=<span class="string">"button"</span> data-slide=<span class="string">"next"</span>&gt;</div><div class="line">    &lt;span class=<span class="string">"glyphicon glyphicon-chevron-right"</span> aria-hidden=<span class="string">"true"</span>&gt;&lt;/span&gt;</div><div class="line">    &lt;span class=<span class="string">"sr-only"</span>&gt;下一张&lt;/span&gt;</div><div class="line">  &lt;/a&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="2-2-5-函数库-underscoreJS"><a href="#2-2-5-函数库-underscoreJS" class="headerlink" title="2.2.5 函数库 underscoreJS"></a>2.2.5 函数库 underscoreJS</h4><ul>
<li><p><code>_.template</code>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">&lt;ol class=<span class="string">"carousel-indicators"</span>&gt;</div><div class="line">  &lt;!--渲染的HTML字符串--&gt;</div><div class="line">&lt;/ol&gt;</div><div class="line">&lt;div class=<span class="string">"carousel-inner"</span> role=<span class="string">"listbox"</span>&gt;</div><div class="line">  &lt;!--渲染的HTML字符串--&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">/*取到模版当中的字符串*/</div><div class="line">var pointTemplateStr = $(<span class="string">'#point_template'</span>).html();</div><div class="line">var imageTemplateStr = $(<span class="string">'#image_template'</span>).html();</div><div class="line">/*转化成模版函数*/</div><div class="line">var pointTemplate = _.template(pointTemplateStr);</div><div class="line">var imageTemplate = _.template(imageTemplateStr);</div><div class="line">/*传入数据 解析成 html 字符*/</div><div class="line">var pointHtml = pointTemplate(&#123;model:data&#125;);</div><div class="line">var imageHtml = imageTemplate(&#123;model:data,isMobile:isMobile&#125;);//我们只需要再加一个属性</div><div class="line">/*把html字符串渲染在页面当中*/</div><div class="line">$(<span class="string">'.carousel-indicators'</span>).html(pointHtml);</div><div class="line">$(<span class="string">'.carousel-inner'</span>).html(imageHtml);</div><div class="line"></div><div class="line">&lt;!--点模版--&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/template"</span> id=<span class="string">"point_template"</span>&gt;</div><div class="line">    &lt;%_.each(model,<span class="keyword">function</span>(obj,i)&#123;%&gt;</div><div class="line">        &lt;li data-target=<span class="string">"#carousel-example-generic"</span> data-slide-to=<span class="string">"&lt;%=i%&gt;"</span> class=<span class="string">"&lt;%=(i==0?'active':'')%&gt;"</span>&gt;&lt;/li&gt;</div><div class="line">    &lt;%&#125;)%&gt;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;!--图片模版--&gt;</div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/template"</span> id=<span class="string">"image_template"</span>&gt;</div><div class="line">    &lt;%_.each(model,<span class="keyword">function</span>(obj,i)&#123;%&gt;</div><div class="line">        &lt;div class=<span class="string">"item &lt;%=(i==0?'active':'')%&gt;"</span>&gt;</div><div class="line">            &lt;% <span class="keyword">if</span>(isMobile)&#123; %&gt;</div><div class="line">                &lt;a href=<span class="string">"#"</span> class=<span class="string">"m_imgBox"</span>&gt;</div><div class="line">                    &lt;img src=<span class="string">"&lt;%=obj.img%&gt;"</span> alt=<span class="string">""</span>/&gt;</div><div class="line">                &lt;/a&gt;</div><div class="line">            &lt;%&#125; <span class="keyword">else</span> &#123;%&gt;</div><div class="line">                &lt;a href=<span class="string">"#"</span> class=<span class="string">"pc_imgBox"</span> style=<span class="string">"background-image:url(&lt;%=obj.bac%&gt;)"</span>&gt;&lt;/a&gt;</div><div class="line">            &lt;%&#125;%&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">    &lt;%&#125;)%&gt;</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="三、rem布局"><a href="#三、rem布局" class="headerlink" title="三、rem布局"></a>三、rem布局</h2><p>准备编辑这段时发现简书上已经有作者写了关于rem布局的介绍，并且他的设置比我所用的更加简洁，贴上地址供大家学习参考。<br><a href="http://www.jianshu.com/p/985d26b40199" target="_blank" rel="external">手机端页面自适应解决方案—rem布局进阶版（附源码示例）</a></p>
<h2 id="四、移动web开发中的常见问题"><a href="#四、移动web开发中的常见问题" class="headerlink" title="四、移动web开发中的常见问题"></a>四、移动web开发中的常见问题</h2><h3 id="4-1-移动端如何定义字体font-family"><a href="#4-1-移动端如何定义字体font-family" class="headerlink" title="4.1 移动端如何定义字体font-family?"></a>4.1 移动端如何定义字体font-family?</h3><p>三大手机系统的字体：</p>
<ul>
<li><strong>iOS 系统</strong>：<ul>
<li>默认中文字体是<code>Heiti SC</code></li>
<li>默认英文字体是<code>Helvetica</code></li>
<li>默认数字字体是<code>HelveticaNeue</code></li>
<li>无微软雅黑字体</li>
</ul>
</li>
<li><strong>Android 系统</strong>：<ul>
<li>默认中文字体是<code>Droidsansfallback</code></li>
<li>默认英文和数字字体是<code>Droid Sans</code></li>
<li>无微软雅黑字体</li>
</ul>
</li>
<li><strong>Winphone 系统</strong>：<ul>
<li>默认中文字体是<code>Dengxian</code>(方正等线体)</li>
<li>默认英文和数字字体是<code>Segoeod</code></li>
<li>无微软雅黑字体</li>
</ul>
</li>
</ul>
<p>各个手机系统有自己的默认字体，且都不支持微软雅黑，如无特殊需求，手机端无需定义中文字体，使用系统默认英文字体和数字字体可使用<code>Helvetica</code>，三种系统都支持。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/* 移动端定义字体的代码 */</div><div class="line">body&#123;</div><div class="line">  font-family:Helvetica;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-2-移动端字体单位font-size选择px还是rem"><a href="#4-2-移动端字体单位font-size选择px还是rem" class="headerlink" title="4.2 移动端字体单位font-size选择px还是rem?"></a>4.2 移动端字体单位font-size选择px还是rem?</h3><ul>
<li><p>对于只需要适配手机设备，使用<code>px</code>即可。</p>
</li>
<li><p>对于需要适配各种移动设备，使用<code>rem</code>，例如只需要适配<code>iPhone</code>和<code>iPad</code>等分辨率差别比较挺大的设备。</p>
</li>
<li><p><code>rem</code>配置参考：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">html &#123;font-size:10px&#125;</div><div class="line">@media screen and (min-width:480px) and (max-width:639px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 15px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:640px) and (max-width:719px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 20px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:720px) and (max-width:749px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 22.5px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:750px) and (max-width:799px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 23.5px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:800px) and (max-width:959px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 25px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:960px) and (max-width:1079px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 30px</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">@media screen and (min-width:1080px) &#123;</div><div class="line">    html &#123;</div><div class="line">        font-size: 32px</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-3-移动端touch事件-区分webkit和winphone-有哪些？"><a href="#4-3-移动端touch事件-区分webkit和winphone-有哪些？" class="headerlink" title="4.3 移动端touch事件(区分webkit和winphone)有哪些？"></a>4.3 移动端touch事件(区分webkit和winphone)有哪些？</h3><p>当用户手指放在移动设备在屏幕上滑动会触发的touch事件：</p>
<ul>
<li><strong>以下支持webkit</strong>：<ul>
<li><code>touchstart</code>——当手指触碰屏幕时候发生。不管当前有多少只手指。</li>
<li><code>touchmove</code>——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用<code>event``preventDefault()</code>可以阻止默认情况的发生：阻止页面滚动。</li>
<li><code>touchend</code>——当手指离开屏幕时触发。</li>
<li><code>touchcancel</code>——系统停止跟踪触摸时候会触发。例如在触摸过程中突然页面<code>alert()</code>一个提示框，此时会触发该事件，这个事件比较少用。</li>
</ul>
</li>
<li><strong>以下支持winphone 8</strong>：<ul>
<li><code>MSPointerDown</code>——当手指触碰屏幕时候发生。不管当前有多少只手指。</li>
<li><code>MSPointerMove</code>——当手指在屏幕上滑动时连续触发。通常我们再滑屏页面，会调用<code>css</code>的<code>html{-ms-touch-action:none;}</code>可以阻止默认情况的发生：阻止页面滚动。</li>
<li><code>MSPointerUp</code>——当手指离开屏幕时触发。</li>
</ul>
</li>
</ul>
<h3 id="4-4-如何解决移动端click屏幕产生200-300ms的延迟响应问题？"><a href="#4-4-如何解决移动端click屏幕产生200-300ms的延迟响应问题？" class="headerlink" title="4.4 如何解决移动端click屏幕产生200-300ms的延迟响应问题？"></a>4.4 如何解决移动端click屏幕产生200-300ms的延迟响应问题？</h3><blockquote>
<p>移动设备上的web网页是有300ms延迟的，往往会造成按钮点击延迟甚至是点击失效。</p>
</blockquote>
<p><strong>解决方案</strong>：</p>
<ul>
<li><code>fastclick</code>可以解决在手机上点击事件的300ms延迟。</li>
<li><code>zepto</code>的<code>touch</code>模块，<code>tap</code>事件也是为了解决在<code>click</code>的延迟问题。</li>
</ul>
<p><strong>触摸事件的响应顺序</strong>：</p>
<ol>
<li><code>ontouchstart</code></li>
<li><code>ontouchmove</code></li>
<li><code>ontouchend</code></li>
<li><code>onclick</code></li>
</ol>
<p>解决300ms延迟的问题，也可以通过绑定<code>ontouchstart</code>事件，加快对事件的响应。</p>
<h3 id="4-5-什么是Retina-显示屏，带来了什么问题？"><a href="#4-5-什么是Retina-显示屏，带来了什么问题？" class="headerlink" title="4.5 什么是Retina 显示屏，带来了什么问题？"></a>4.5 什么是Retina 显示屏，带来了什么问题？</h3><p><strong>retina</strong>：一种具备超高像素密度的液晶屏，同样大小的屏幕上显示的像素点由1个变为多个，如在同样带下的屏幕上，苹果设备的<code>retina</code>显示屏中，像素点1个变为4个。</p>
<p>在高清显示屏中的位图被放大，图片会变得模糊，<strong>因此移动端的视觉稿通常会设计为传统PC的2倍</strong>。</p>
<p>那么，前端的应对方案是：</p>
<p>设计稿切出来的图片长宽保证为偶数，并使用<code>backgroud-size</code>把图片缩小为原来的1/2。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//例如图片宽高为：200px*200px，那么写法如下</div><div class="line">.css&#123;width:100px;height:100px;background-size:100px 100px;&#125;</div></pre></td></tr></table></figure>
<p>其它元素的取值为原来的1/2，例如视觉稿40px的字体，使用样式的写法为20px。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.css&#123;font-size:20px&#125;</div></pre></td></tr></table></figure>
<h3 id="4-6-移动端如何取消touch高亮效果？"><a href="#4-6-移动端如何取消touch高亮效果？" class="headerlink" title="4.6 移动端如何取消touch高亮效果？"></a>4.6 移动端如何取消touch高亮效果？</h3><p>在做移动端页面时，会发现所有a标签在触发点击时或者所有设置了伪类<code>:active</code>的元素，默认都会在激活状态时，显示高亮框，如果不想要这个高亮，那么你可以通过css以下方法来进行全局的禁止：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><p><code>ios</code>用户点击一个链接，会出现一个半透明灰色遮罩, 如果想要禁用，可设置<code>-webkit-tap-highlight-color</code>的<code>alpha</code>值为0，也就是属性值的最后一位设置为0就可以去除半透明灰色遮罩。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">a,button,input,textarea&#123;-webkit-tap-highlight-color: rgba(0,0,0,0;)&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>android</code>用户点击一个链接，会出现一个边框或者半透明灰色遮罩, 不同生产商定义出来额效果不一样，可设置<code>-webkit-tap-highlight-color的alpha</code>值为0去除部分机器自带的效果。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">a,button,input,textarea&#123;</div><div class="line">    -webkit-tap-highlight-color: rgba(0,0,0,0;)</div><div class="line">    -webkit-user-modify:<span class="built_in">read</span>-write-plaintext-only; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>-webkit-user-modify</code>有个副作用，就是输入法不再能够输入多个字符。</p>
<p>另外，有些机型去除不了，如小米2。对于此类问题还有个办法，不使用<code>a</code>或者<code>input</code>标签，直接用<code>div</code>标签。</p>
</li>
<li><p><code>winphone</code>系统<code>a</code>、<code>input</code>标签被点击时产生的半透明灰色背景怎么去掉？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=<span class="string">"msapplication-tap-highlight"</span> content=<span class="string">"no"</span>&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-7-关于webkit表单的几个问题"><a href="#4-7-关于webkit表单的几个问题" class="headerlink" title="4.7 关于webkit表单的几个问题"></a>4.7 关于webkit表单的几个问题</h3><ul>
<li><p><code>webkit</code>表单元素的默认外观怎么重置？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">.css&#123;-webkit-appearance:none;&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><code>webkit</code>表单输入框<code>placeholder</code>的颜色值能改变么？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">input::-webkit-input-placeholder&#123;color:<span class="comment">#AAAAAA;&#125;</span></div><div class="line">input:focus::-webkit-input-placeholder&#123;color:<span class="comment">#EEE&#125;</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>webkit</code>表单输入框<code>placeholder</code>的文字能换行么？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">iOS可以，Android不行。</div></pre></td></tr></table></figure>
</li>
<li><p>如何禁止文本缩放？</p>
<p>当移动设备横竖屏切换时，文本的大小会重新计算，进行相应的缩放，当我们不需要这种情况时，可以选择禁止：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">html &#123;</div><div class="line">    -webkit-text-size-adjust: 100%;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>需要注意的是，PC端的该属性已经被移除，该属性在移动端要生效，必须设置<code>meta viewport</code>。</p>
</li>
</ul>
<h3 id="4-8-如何在移动端禁止用户选中内容？"><a href="#4-8-如何在移动端禁止用户选中内容？" class="headerlink" title="4.8 如何在移动端禁止用户选中内容？"></a>4.8 如何在移动端禁止用户选中内容？</h3><p>如果你不想用户可以选中页面中的内容，那么你可以在css中禁掉：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">.user-select-none &#123;</div><div class="line">  -webkit-user-select: none;  /* Chrome all / Safari all */</div><div class="line">  -moz-user-select: none;     /* Firefox all （移动端不需要） */</div><div class="line">  -ms-user-select: none;      /* IE 10+ */      </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-9-如何模拟按钮的hover效果？"><a href="#4-9-如何模拟按钮的hover效果？" class="headerlink" title="4.9 如何模拟按钮的hover效果？"></a>4.9 如何模拟按钮的hover效果？</h3><p>移动端触摸按钮的效果，可明示用户有些事情正要发生，是一个比较好体验，但是移动设备中并没有鼠标指针，使用<code>css</code>的<code>hover</code>并不能满足我们的需求，还好国外有个激活<code>css</code>的<code>active</code>效果，代码如下：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> name=<span class="string">"viewport"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"yes"</span> name=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"black"</span> name=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"telephone=no"</span> name=<span class="string">"format-detection"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"email=no"</span> name=<span class="string">"format-detection"</span>&gt;</div><div class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">a&#123;-webkit-tap-highlight-color: rgba(0,0,0,0);&#125;</div><div class="line">.btn-blue&#123;display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:<span class="comment">#FFFFFF;background-color: #4185F3;&#125;</span></div><div class="line">.btn-blue:active&#123;background-color: <span class="comment">#357AE8;&#125;</span></div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div class=<span class="string">"btn-blue"</span>&gt;按钮&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">document.addEventListener(<span class="string">"touchstart"</span>, <span class="function"><span class="title">function</span></span>()&#123;&#125;, <span class="literal">true</span>)</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div><div class="line">兼容性ios5+、部分android 4+、winphone 8</div></pre></td></tr></table></figure>
<p>要做到全兼容的办法，可通过绑定<code>ontouchstart</code>和<code>ontouchend</code>来控制按钮的类名。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">&lt;meta charset=<span class="string">"utf-8"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no"</span> name=<span class="string">"viewport"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"yes"</span> name=<span class="string">"apple-mobile-web-app-capable"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"black"</span> name=<span class="string">"apple-mobile-web-app-status-bar-style"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"telephone=no"</span> name=<span class="string">"format-detection"</span>&gt;</div><div class="line">&lt;meta content=<span class="string">"email=no"</span> name=<span class="string">"format-detection"</span>&gt;</div><div class="line">&lt;style <span class="built_in">type</span>=<span class="string">"text/css"</span>&gt;</div><div class="line">a&#123;-webkit-tap-highlight-color: rgba(0,0,0,0);&#125;</div><div class="line">.btn-blue&#123;display:block;height:42px;line-height:42px;text-align:center;border-radius:4px;font-size:18px;color:<span class="comment">#FFFFFF;background-color: #4185F3;&#125;</span></div><div class="line">.btn-blue-on&#123;background-color: <span class="comment">#357AE8;&#125;</span></div><div class="line">&lt;/style&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line"></div><div class="line">&lt;div class=<span class="string">"btn-blue"</span>&gt;按钮&lt;/div&gt;</div><div class="line"></div><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">var btnBlue = document.querySelector(<span class="string">".btn-blue"</span>);</div><div class="line">btnBlue.ontouchstart = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    this.className = <span class="string">"btn-blue btn-blue-on"</span></div><div class="line">&#125;</div><div class="line">btnBlue.ontouchend = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">    this.className = <span class="string">"btn-blue"</span></div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<h3 id="4-10-屏幕旋转的事件和样式"><a href="#4-10-屏幕旋转的事件和样式" class="headerlink" title="4.10 屏幕旋转的事件和样式"></a>4.10 屏幕旋转的事件和样式</h3><ul>
<li><p><strong>事件</strong>：<code>window.orientation</code>，取值：正负90表示横屏模式、0和180表现为竖屏模式。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">window.onorientationchange = <span class="function"><span class="title">function</span></span>()&#123;</div><div class="line">            switch(window.orientation)&#123;</div><div class="line">                <span class="keyword">case</span> -90:</div><div class="line">                <span class="keyword">case</span> 90:</div><div class="line">                alert(<span class="string">"横屏:"</span> + window.orientation);</div><div class="line">                <span class="keyword">case</span> 0:</div><div class="line">                <span class="keyword">case</span> 180:</div><div class="line">                alert(<span class="string">"竖屏:"</span> + window.orientation);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p><strong>样式</strong>：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//竖屏时使用的样式</div><div class="line">@media all and (orientation:portrait) &#123;</div><div class="line">    .css&#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//横屏时使用的样式</div><div class="line">@media all and (orientation:landscape) &#123;</div><div class="line">    .css&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-11-移动端常见的一些功能"><a href="#4-11-移动端常见的一些功能" class="headerlink" title="4.11 移动端常见的一些功能"></a>4.11 移动端常见的一些功能</h3><ul>
<li><p>摇一摇功能：</p>
<p><code>HTML5 deviceMotion</code>：封装了运动传感器数据的事件，可以获取手机运动状态下的运动加速度等数据。</p>
</li>
<li><p>手机拍照和上传图片：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;input <span class="built_in">type</span>=<span class="string">"file"</span>&gt;的accept 属性</div><div class="line">&lt;!-- 选择照片 --&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=file accept=<span class="string">"image/*"</span>&gt;</div><div class="line">&lt;!-- 选择视频 --&gt;</div><div class="line">&lt;input <span class="built_in">type</span>=file accept=<span class="string">"video/*"</span>&gt;</div></pre></td></tr></table></figure>
<p>使用总结：</p>
<ol>
<li><code>iOS</code>有拍照、录像、选取本地图片功能。</li>
<li>部分<code>android</code>只有选取本地图片功能。</li>
<li><code>winphone</code>不支持。</li>
<li><code>input</code>控件默认外观丑陋。</li>
</ol>
</li>
<li><p>消除<code>transition</code>闪屏：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">.css&#123;</div><div class="line">    /*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/</div><div class="line">    -webkit-transform-style: preserve-3d;</div><div class="line">    /*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/</div><div class="line">    -webkit-backface-visibility: hidden;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>开启硬件加速：</p>
<ol>
<li>解决页面闪白。</li>
<li><p>保证动画流畅。</p>
<p>.css {</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">-webkit-transform: translate3d(0, 0, 0);</div><div class="line">-moz-transform: translate3d(0, 0, 0);</div><div class="line">-ms-transform: translate3d(0, 0, 0);</div><div class="line">transform: translate3d(0, 0, 0);</div></pre></td></tr></table></figure>
<p>  }</p>
</li>
</ol>
</li>
<li><p><code>android</code>上去掉语音输入按钮：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">input::-webkit-input-speech-button &#123;display: none&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4-12-如何禁止百度转码？"><a href="#4-12-如何禁止百度转码？" class="headerlink" title="4.12 如何禁止百度转码？"></a>4.12 如何禁止百度转码？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"Cache-Control"</span> content=<span class="string">"no-siteapp"</span> /&gt;</div></pre></td></tr></table></figure>
<h3 id="4-13-怎样默认优先使用最新版本IE和Chrome？"><a href="#4-13-怎样默认优先使用最新版本IE和Chrome？" class="headerlink" title="4.13 怎样默认优先使用最新版本IE和Chrome？"></a>4.13 怎样默认优先使用最新版本IE和Chrome？</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"IE=edge,chrome=1"</span> /&gt;</div></pre></td></tr></table></figure>
<p><strong> 原文地址：<a href="http://www.jianshu.com/u/7c71a417c6c9" target="_blank" rel="external">http://www.jianshu.com/u/7c71a417c6c9</a> </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前针对web前端页面的设计主要分为pc端和移动端页面，针对不同的页面我们可能会采取不同的布局格式，在整个布局的选择上，没有一成不变的，也没有任何一种布局能够满足各个方面的需要，在众多的布局方式中，我这边主要针对以下几种布局方式简单的发表一下个人的看法。&lt;/p&gt;
    
    </summary>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>HTML5本地存储和本地数据库的前世今生</title>
    <link href="http://yoursite.com/2017/05/12/HTML5%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%E5%92%8C%E6%9C%AC%E5%9C%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A%E7%94%9F/"/>
    <id>http://yoursite.com/2017/05/12/HTML5本地存储和本地数据库的前世今生/</id>
    <published>2017-05-12T09:48:49.000Z</published>
    <updated>2017-06-15T03:43:42.792Z</updated>
    
    <content type="html"><![CDATA[<p>当我们在提及web前端本地存储的时候，首先需要介绍一下本地化存储的概念和历史。本地化存储从来不是一个新奇的概念，因为web应用程序一直在追求的就是媲美甚至超越桌面应用程序。但是桌面应用程序一直优于web应用程序一个很重要的原因是它的本地化存储得到了很好的支持。对于本地应用程序，操作系统会提供一个抽象层，用于存储和获取特定于应用程序的数据，这些数据可以存储于注册表、INI文件，或者其他什么地方，这取决于操作系统的实现，如果本地应用程序需要不单是键值对形式的本地存储，可以使用嵌入式数据库或其他很多种解决方案。而对于web应用程序，它的本地存储一步一步走到今天的HTML5本地存储是非常不容易的。</p>
<a id="more"></a>
<h4 id="一、本地存储由来的背景"><a href="#一、本地存储由来的背景" class="headerlink" title="一、本地存储由来的背景"></a>一、本地存储由来的背景</h4><p>由于HTML4时代Cookie的大小、格式、存储数据格式等限制，网站应用如果想在浏览器端存储用户的部分信息，那么只能借助于Cookie。但是Cookie的这些限制，也就导致了Cookie只能存储一些ID之类的标识符等简单的数据。</p>
<p>下面是Cookie的限制：</p>
<ul>
<li>大多数浏览器支持最大为 4096 字节的Cookie。</li>
<li>浏览器还限制站点可以在用户计算机上存储的Cookie的数量。大多数浏览器只允许每个站点存储 20 个Cookie；如果试图存储更多Cookie，则最旧的Cookie便会被丢弃。</li>
<li>有些浏览器还会对它们将接受的来自所有站点的Cookie总数作出绝对限制，通常为 300 个。</li>
<li>Cookie默认情况都会随着Http请求发送到后台服务器，但并不是所有请求都需要Cookie的，比如：js、css、图片等请求则不需要Cookie。</li>
</ul>
<p>为了破解Cookie的一系列限制，HTML5通过JS的新的API就能直接存储大量的数据到客户端浏览器，而且支持复杂的本地数据库，让JS更有效率。 HTML5支持两种的WebStorage：</p>
<ul>
<li>永久性的本地存储（localStorage）</li>
<li>会话级别的本地存储（sessionStorage）</li>
</ul>
<h4 id="二、永久性的本地存储：localStorage"><a href="#二、永久性的本地存储：localStorage" class="headerlink" title="二、永久性的本地存储：localStorage"></a>二、永久性的本地存储：localStorage</h4><p>在最新的JS的API中增加了localStorage对象，以便于用户存储永久存储的Web端的数据。而且数据不会随着Http请求发送到后台服务器，而且存储数据的大小机会不用考虑，因为在HTML5的标准中要求浏览器至少要支持到4MB.所以，这完全是颠覆了Cookie的限制，为Web应用在本地存储复杂的用户痕迹数据提供非常方便的技术支持。接下来就将介绍localStorage的常用的方法。</p>
<p>localStorage提供了四个方法来辅助我们进行对本地存储做相关操作。</p>
<ul>
<li>setItem(key,value)添加本地存储数据。两个参数，非常简单就不说了。</li>
<li>getItem(key)通过key获取相应的Value。</li>
<li>removeItem(key)通过key删除本地数据。</li>
<li><p>clear()清空数据。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  //添加key-value 数据到 sessionStorage</div><div class="line">  localStorage.setItem(<span class="string">"demokey"</span>, <span class="string">"http://www.shiyanlou.com"</span>);</div><div class="line">  //通过key来获取value</div><div class="line">  var dt = localStorage.getItem(<span class="string">"demokey"</span>);</div><div class="line">  alert(dt);</div><div class="line">  //清空所有的key-value数据。</div><div class="line">  //localStorage.clear();</div><div class="line">  alert(localStorage.length);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="三、会话级别的本地存储：sessionStorage"><a href="#三、会话级别的本地存储：sessionStorage" class="headerlink" title="三、会话级别的本地存储：sessionStorage"></a>三、会话级别的本地存储：sessionStorage</h4><p>在HTML5中增加了一个Js对象：sessionStorage；通过此对象可以直接操作存储在浏览器中的会话级别的WebStorage。存储在sessionStorage中的数据首先是Key-Value形式的，另外就是它跟浏览器当前会话相关，当会话结束后，数据会自动清除，跟未设置过期时间的Cookie类似。</p>
<p>sessionStorage提供了四个方法来辅助我们进行对本地存储做相关操作。</p>
<ul>
<li>setItem(key,value)添加本地存储数据。两个参数，非常简单就不说了。</li>
<li>getItem(key)通过key获取相应的Value。</li>
<li>removeItem(key)通过key删除本地数据。</li>
<li><p>clear()清空数据。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">  //添加key-value 数据到 sessionStorage</div><div class="line">  sessionStorage.setItem(<span class="string">"demokey"</span>, <span class="string">"http://blog.itjeek.com"</span>);</div><div class="line">  //通过key来获取value</div><div class="line">  var dt = sessionStorage.getItem(<span class="string">"demokey"</span>);</div><div class="line">  alert(dt);</div><div class="line">  //清空所有的key-value数据。</div><div class="line">  //sessionStorage.clear();</div><div class="line">  alert(sessionStorage.length);</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="四、强大的本地数据"><a href="#四、强大的本地数据" class="headerlink" title="四、强大的本地数据"></a>四、强大的本地数据</h4><p>虽然HTML5已经提供了功能强大的localStorage和sessionStorage，但是他们两个都只能提供存储简单数据结构的数据，对于复杂的Web应用的数据却无能为力。逆天的是HTML5提供了一个浏览器端的数据库支持，允许我们直接通JS的API在浏览器端创建一个本地的数据库，而且支持标准的SQL的CRUD操作，让离线的Web应用更加方便的存储结构化的数据。接下里介绍一下本地数据的相关API和用法。</p>
</li>
</ul>
<p>操作本地数据库的最基本的步骤是：</p>
<ul>
<li>第一步：openDatabase方法：创建一个访问数据库的对象。</li>
<li>第二步：使用第一步创建的数据库访问对象来执行transaction方法，通过此方法可以设置一个开启事务成功的事件响应方法，在事件响应方法中可以执行SQL.</li>
<li>第三步：通过executeSql方法执行查询，当然查询可以是：CRUD。</li>
</ul>
<p>接下来分别介绍一下相关的方法的参数和用法。</p>
<p>1、 openDatabase方法</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">//Demo：获取或者创建一个数据库，如果数据库不存在那么创建之</div><div class="line">var dataBase = openDatabase(<span class="string">"student"</span>, <span class="string">"1.0"</span>, <span class="string">"学生表"</span>, 1024 * 1024, <span class="function"><span class="title">function</span></span> () &#123; &#125;);</div></pre></td></tr></table></figure>
<p>openDatabase方法打开一个已经存在的数据库，如果数据库不存在，它还可以创建数据库。几个参数意义分别是：</p>
<ul>
<li>数据库名称。</li>
<li>数据库的版本号，目前来说传个1.0就可以了，当然可以不填；</li>
<li>对数据库的描述。</li>
<li>设置分配的数据库的大小（单位是kb）。</li>
<li>回调函数(可省略)。</li>
</ul>
<p>初次调用时创建数据库，以后就是建立连接了。</p>
<p>2.、db.transaction方法</p>
<p>可以设置一个回调函数，此函数可以接受一个参数就是我们开启的事务的对象。然后通过此对象可以执行SQL脚本。</p>
<p>3.、executeSql方法执行查询</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ts.executeSql(sqlQuery,[value1,value2..],dataHandler,errorHandler)</div></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li>qlQuery：需要具体执行的sql语句，可以是create、select、update、delete;</li>
<li>[value1,value2..]：sql语句中所有使用到的参数的数组，在executeSql方法中，将s&gt;语句中所要使用的参数先用“?”代替，然后依次将这些参数组成数组放在第二个参数中;</li>
<li>dataHandler：执行成功是调用的回调函数，通过该函数可以获得查询结果集;</li>
<li>errorHandler：执行失败时调用的回调函数;</li>
</ul>
<h4 id="综合实例"><a href="#综合实例" class="headerlink" title="综合实例"></a>综合实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div></pre></td><td class="code"><pre><div class="line">&lt;head&gt;</div><div class="line"> &lt;script src=<span class="string">"Scripts/jquery-1.5.1.js"</span> <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;&lt;/script&gt;</div><div class="line">    &lt;script <span class="built_in">type</span>=<span class="string">"text/javascript"</span>&gt;</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">initDatabase</span></span>() &#123;</div><div class="line">            var db = getCurrentDb();//初始化数据库</div><div class="line">            <span class="keyword">if</span>(!db) &#123;alert(<span class="string">"您的浏览器不支持HTML5本地数据库"</span>);<span class="built_in">return</span>;&#125;</div><div class="line">            db.transaction(<span class="keyword">function</span> (trans) &#123;//启动一个事务，并设置回调函数</div><div class="line">                //执行创建表的Sql脚本</div><div class="line">                trans.executeSql(<span class="string">"create table if not exists Demo(uName text null,title text null,words text null)"</span>, [], <span class="keyword">function</span> (trans, result) &#123;</div><div class="line">                &#125;, <span class="keyword">function</span> (trans, message) &#123;//消息的回调函数alert(message);&#125;);</div><div class="line">            &#125;, <span class="keyword">function</span> (trans, result) &#123;</div><div class="line">            &#125;, <span class="keyword">function</span> (trans, message) &#123;</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        $(<span class="function"><span class="title">function</span></span> () &#123;//页面加载完成后绑定页面按钮的点击事件</div><div class="line">            initDatabase();</div><div class="line">            $(<span class="string">"#btnSave"</span>).click(<span class="function"><span class="title">function</span></span> () &#123;</div><div class="line">                var txtName = $(<span class="string">"#txtName"</span>).val();</div><div class="line">                var txtTitle = $(<span class="string">"#txtTitle"</span>).val();</div><div class="line">                var txtWords = $(<span class="string">"#txtWords"</span>).val();</div><div class="line">                var db = getCurrentDb();</div><div class="line">                //执行sql脚本，插入数据</div><div class="line">                db.transaction(<span class="keyword">function</span> (trans) &#123;</div><div class="line">                    trans.executeSql(<span class="string">"insert into Demo(uName,title,words) values(?,?,?) "</span>, [txtName, txtTitle, txtWords], <span class="keyword">function</span> (ts, data) &#123;</div><div class="line">                    &#125;, <span class="keyword">function</span> (ts, message) &#123;</div><div class="line">                        alert(message);</div><div class="line">                    &#125;);</div><div class="line">                &#125;);</div><div class="line">                showAllTheData();</div><div class="line">            &#125;);</div><div class="line">        &#125;);</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">getCurrentDb</span></span>() &#123;</div><div class="line">            //打开数据库，或者直接连接数据库参数：数据库名称，版本，概述，大小</div><div class="line">            //如果数据库不存在那么创建之</div><div class="line">            var db = openDatabase(<span class="string">"myDb"</span>, <span class="string">"1.0"</span>, <span class="string">"it's to save demo data!"</span>, 1024 * 1024); ;</div><div class="line">            <span class="built_in">return</span> db;</div><div class="line">        &#125;</div><div class="line">        //显示所有数据库中的数据到页面上去</div><div class="line">        <span class="keyword">function</span> <span class="function"><span class="title">showAllTheData</span></span>() &#123;</div><div class="line">            $(<span class="string">"#tblData"</span>).empty();</div><div class="line">            var db = getCurrentDb();</div><div class="line">            db.transaction(<span class="keyword">function</span> (trans) &#123;</div><div class="line">                trans.executeSql(<span class="string">"select * from Demo "</span>, [], <span class="keyword">function</span> (ts, data) &#123;</div><div class="line">                    <span class="keyword">if</span> (data) &#123;</div><div class="line">                        <span class="keyword">for</span> (var i = 0; i &lt; data.rows.length; i++) &#123;</div><div class="line">                            appendDataToTable(data.rows.item(i));//获取某行数据的json对象</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;, <span class="keyword">function</span> (ts, message) &#123;alert(message);var tst = message;&#125;);</div><div class="line">            &#125;);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">function</span> appendDataToTable(data) &#123;//将数据展示到表格里面</div><div class="line">            //uName,title,words</div><div class="line">            var txtName = data.uName;</div><div class="line">            var txtTitle = data.title;</div><div class="line">            var words = data.words;</div><div class="line">            var strHtml = <span class="string">""</span>;</div><div class="line">            strHtml += <span class="string">"&lt;tr&gt;"</span>;</div><div class="line">            strHtml += <span class="string">"&lt;td&gt;"</span>+txtName+<span class="string">"&lt;/td&gt;"</span>;</div><div class="line">            strHtml += <span class="string">"&lt;td&gt;"</span> + txtTitle + <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">            strHtml += <span class="string">"&lt;td&gt;"</span> + words + <span class="string">"&lt;/td&gt;"</span>;</div><div class="line">            strHtml += <span class="string">"&lt;/tr&gt;"</span>;</div><div class="line">            $(<span class="string">"#tblData"</span>).append(strHtml);</div><div class="line">        &#125;</div><div class="line">    &lt;/script&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">    &lt;body&gt;</div><div class="line">        &lt;table&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;用户名：&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"txtName"</span> id=<span class="string">"txtName"</span> required/&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">               &lt;tr&gt;</div><div class="line">                &lt;td&gt;标题：&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"txtTitle"</span> id=<span class="string">"txtTitle"</span> required/&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">            &lt;tr&gt;</div><div class="line">                &lt;td&gt;留言：&lt;/td&gt;</div><div class="line">                &lt;td&gt;&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"txtWords"</span> id=<span class="string">"txtWords"</span> required/&gt;&lt;/td&gt;</div><div class="line">            &lt;/tr&gt;</div><div class="line">        &lt;/table&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"保存"</span> id=<span class="string">"btnSave"</span>/&gt;</div><div class="line">        &lt;hr/&gt;</div><div class="line">        &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> value=<span class="string">"展示所哟数据"</span> onclick=<span class="string">"showAllTheData();"</span>/&gt;</div><div class="line">        &lt;table id=<span class="string">"tblData"</span>&gt;</div><div class="line">        &lt;/table&gt;</div><div class="line">    &lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure>
<p><strong> 作者：<a href="http://www.jianshu.com/u/b7dc6ae92940" target="_blank" rel="external">如山间清爽的风</a> </strong><br><strong> 原文地址：<a href="http://www.jianshu.com/p/f9b5bc2e6b85" target="_blank" rel="external">http://www.jianshu.com/p/f9b5bc2e6b85</a></strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我们在提及web前端本地存储的时候，首先需要介绍一下本地化存储的概念和历史。本地化存储从来不是一个新奇的概念，因为web应用程序一直在追求的就是媲美甚至超越桌面应用程序。但是桌面应用程序一直优于web应用程序一个很重要的原因是它的本地化存储得到了很好的支持。对于本地应用程序，操作系统会提供一个抽象层，用于存储和获取特定于应用程序的数据，这些数据可以存储于注册表、INI文件，或者其他什么地方，这取决于操作系统的实现，如果本地应用程序需要不单是键值对形式的本地存储，可以使用嵌入式数据库或其他很多种解决方案。而对于web应用程序，它的本地存储一步一步走到今天的HTML5本地存储是非常不容易的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="http://yoursite.com/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>经典JS闭包面试题</title>
    <link href="http://yoursite.com/2017/04/12/%E7%BB%8F%E5%85%B8JS%E9%97%AD%E5%8C%85%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>http://yoursite.com/2017/04/12/经典JS闭包面试题/</id>
    <published>2017-04-12T09:45:49.000Z</published>
    <updated>2017-06-15T03:37:32.591Z</updated>
    
    <content type="html"><![CDATA[<p>闭包：从字面意思来理解就是封闭和包裹，换句话说，就是在函数内部定义的变量，在函数的外部无法访问到，因此就说函数构成了一个闭包。说白了闭包是作用域的应用。计算机科学中对闭包的定义为：一个函数的函数体以及函数所处的环境，构成的一个综合体叫做：闭包函数体：就是函数内部的代码。函数所处的环境：指的就是作用域。是不是觉得计算机科学中对闭包的定义是不是很难理解。下面我就来我面试时遇到的一些闭包问题。</p>
<a id="more"></a>
<h2 id="由工作中演变而来的面试题"><a href="#由工作中演变而来的面试题" class="headerlink" title="由工作中演变而来的面试题"></a>由工作中演变而来的面试题</h2><p>这是一个我工作当中的遇到的一个问题，似乎很有趣，就当做了一道题去面试，发现几乎没人能全部答对并说出原因，遂拿出来聊一聊吧。</p>
<p>先看题目代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> fun(n,o) &#123;</div><div class="line">  console.log(o)</div><div class="line">  <span class="built_in">return</span> &#123;</div><div class="line">    fun:<span class="keyword">function</span>(m)&#123;</div><div class="line">      <span class="built_in">return</span> fun(m,n);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">var a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);//undefined,?,?,?</div><div class="line">var b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,?</div><div class="line">var c = fun(0).fun(1);  c.fun(2);  c.fun(3);//undefined,?,?,?</div><div class="line">//问:三行a,b,c的输出分别是什么？</div></pre></td></tr></table></figure>
<p>这是一道非常典型的JS闭包问题。其中嵌套了三层<code>fun</code>函数，搞清楚每层<code>fun</code>的函数是那个<code>fun</code>函数尤为重要。</p>
<p>可以先在纸上或其他地方写下你认为的结果，然后展开看看正确答案是什么？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//答案：</div><div class="line">//a: undefined,0,0,0</div><div class="line">//b: undefined,0,1,2</div><div class="line">//c: undefined,0,1,1</div></pre></td></tr></table></figure>
<p>都答对了么？如果都答对了恭喜你在js闭包问题当中几乎没什么可以难住你了；如果没有答对，继续往下分析。</p>
<h2 id="JS中有几种函数"><a href="#JS中有几种函数" class="headerlink" title="JS中有几种函数"></a>JS中有几种函数</h2><p>首先，在此之前需要了解的是，在JS中函数可以分为两种，<strong>具名函数（命名函数）</strong>和<strong>匿名函数</strong>。</p>
<p>区分这两种函数的方法非常简单，可以通过输出<code>fn.name</code>来判断，有name的就是具名函数，没有name的就是匿名函数。</p>
<blockquote>
<p>注意：在低版本IE上无法获取具名函数的name，会返回undefined，建议在火狐或是谷歌浏览器上测试。</p>
</blockquote>
<p>或是采用兼容IE的获取函数<code>name</code>方法来获取函数名称：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line">    * 获取指定函数的函数名称（用于兼容IE）</div><div class="line">    * @param &#123;Function&#125; fun 任意函数</div><div class="line">    */</div><div class="line"><span class="keyword">function</span> getFunctionName(fun) &#123;</div><div class="line">    <span class="keyword">if</span> (fun.name !== undefined)</div><div class="line">        <span class="built_in">return</span> fun.name;</div><div class="line">    var ret = fun.toString();</div><div class="line">    ret = ret.substr(<span class="string">'function '</span>.length);</div><div class="line">    ret = ret.substr(0, ret.indexOf(<span class="string">'('</span>));</div><div class="line">    <span class="built_in">return</span> ret;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>遂用上述函数测试是否为匿名函数：</p>
<div class="image-package"><img src="http://upload-images.jianshu.io/upload_images/675733-e9995a01ed05d416.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br></div>

<p>可以得知变量<code>fn1</code>是具名函数，<code>fn2</code>是匿名函数。</p>
<h2 id="创建函数的几种方式"><a href="#创建函数的几种方式" class="headerlink" title="创建函数的几种方式"></a>创建函数的几种方式</h2><p>说完函数的类型，还需要了解JS中创建函数都有几种创建方法。</p>
<p><strong>1、声明函数</strong></p>
<p>最普通最标准的声明函数方法，包括函数名及函数体。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">fn1</span></span>()&#123;&#125;</div></pre></td></tr></table></figure>
<p><strong>2、创建匿名函数表达式</strong></p>
<p>创建一个变量，这个变量的内容为一个函数</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var fn1=<span class="function"><span class="title">function</span></span> ()&#123;&#125;</div></pre></td></tr></table></figure>
<p>注意采用这种方法创建的函数为<strong>匿名函数</strong>，即没有函数<code>name</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var fn1=<span class="function"><span class="title">function</span></span> ()&#123;&#125;;</div><div class="line">getFunctionName(fn1).length;//0</div></pre></td></tr></table></figure>
<p><strong>3、创建具名函数表达式</strong></p>
<p>创建一个变量，内容为一个带有名称的函数。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var fn1=<span class="keyword">function</span> <span class="function"><span class="title">xxcanghai</span></span>()&#123;&#125;;</div></pre></td></tr></table></figure>
<blockquote>
<p>注意：具名函数表达式的函数名只能在创建函数内部使用</p>
</blockquote>
<p>即采用此种方法创建的函数在函数外层只能使用fn1不能使用xxcanghai的函数名。xxcanghai的命名只能在创建的函数内部使用。</p>
<p>测试：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">var fn1=<span class="keyword">function</span> <span class="function"><span class="title">xxcanghai</span></span>()&#123;</div><div class="line">    console.log(<span class="string">"in:fn1&lt;"</span>,typeof fn1,<span class="string">"&gt;xxcanghai:&lt;"</span>,typeof xxcanghai,<span class="string">"&gt;"</span>);</div><div class="line">&#125;;</div><div class="line">console.log(<span class="string">"out:fn1&lt;"</span>,typeof fn1,<span class="string">"&gt;xxcanghai:&lt;"</span>,typeof xxcanghai,<span class="string">"&gt;"</span>);</div><div class="line">fn1();</div><div class="line">//out:fn1&lt; <span class="keyword">function</span> &gt;xxcanghai:&lt; undefined &gt;</div><div class="line">//<span class="keyword">in</span>:fn1&lt; <span class="keyword">function</span> &gt;xxcanghai:&lt; <span class="keyword">function</span> &gt;</div></pre></td></tr></table></figure>
<p>可以看到在函数外部（out）无法使用xxcanghai的函数名，为undefined。</p>
<blockquote>
<p>注意：在对象内定义函数如<code>var o={ fn : function (){…} }</code>，也属于函数表达式。</p>
</blockquote>
<p><strong>4、Function构造函数</strong></p>
<p>可以给 <code>Function</code> 构造函数传一个函数字符串，返回包含这个字符串命令的函数，此种方法创建的是<strong>匿名函数</strong>。</p>
<div class="image-package"><img src="http://upload-images.jianshu.io/upload_images/675733-1ba53a0815064f6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br></div>

<p><strong>5、自执行函数</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="title">function</span></span>()&#123;alert(1);&#125;)();</div><div class="line">(<span class="keyword">function</span> <span class="function"><span class="title">fn1</span></span>()&#123;alert(1);&#125;)();</div></pre></td></tr></table></figure>
<p>自执行函数属于上述的“函数表达式”，规则相同</p>
<p><strong>6、其他创建函数的方法</strong></p>
<p>当然还有其他创建函数或执行函数的方法，这里不再多说，比如采用 <code>eval</code> ， <code>setTimeout</code> ， <code>setInterval</code> 等非常用方法，这里不做过多介绍，属于非标准方法，这里不做过多展开。</p>
<h2 id="三个fun函数的关系是什么？"><a href="#三个fun函数的关系是什么？" class="headerlink" title="三个fun函数的关系是什么？"></a>三个fun函数的关系是什么？</h2><p>说完函数类型与创建函数的方法后，就可以回归主题，看这道面试题。</p>
<p>这段代码中出现了三个<code>fun</code>函数，所以第一步先搞清楚，这三个<code>fun</code>函数的关系，哪个函数与哪个函数是相同的。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> fun(n,o) &#123;</div><div class="line">  console.log(o)</div><div class="line">  <span class="built_in">return</span> &#123;</div><div class="line">    fun:<span class="keyword">function</span>(m)&#123;</div><div class="line">      //...</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>先看第一个<code>fun</code>函数，属于标准具名函数声明，是<strong>新创建</strong>的函数，他的返回值是一个对象字面量表达式，属于一个新的object。</p>
<p>这个新的对象内部包含一个也叫<code>fun</code>的属性，通过上述介绍可得知，属于匿名函数表达式，即<code>fun</code>这个属性中存放的是一个<strong>新创建</strong>匿名函数表达式。</p>
<blockquote>
<p>注意：所有<strong>声明的匿名函数都是一个新函数。</strong></p>
</blockquote>
<p>所以第一个<code>fun</code>函数与第二个<code>fun</code>函数不相同，均为新创建的函数。</p>
<h2 id="函数作用域链的问题"><a href="#函数作用域链的问题" class="headerlink" title="函数作用域链的问题"></a>函数作用域链的问题</h2><p>再说第三个<code>fun</code>函数之前需要先说下，在<em>函数表达式</em>内部能不能访问存放当前函数的变量。</p>
<p><strong>测试1，对象内部的函数表达式：</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bash</div><div class="line">var o=&#123;</div><div class="line">  fn:<span class="function"><span class="title">function</span></span> ()&#123;</div><div class="line">    console.log(fn);</div><div class="line">  &#125;</div><div class="line">&#125;;</div><div class="line">o.fn();//ERROR报错</div></pre></td></tr></table></figure>
<div class="image-package"><img src="http://upload-images.jianshu.io/upload_images/675733-b119cb7ac30d142e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br></div>

<p><strong>测试2，非对象内部的函数表达式：</strong></p>
<p>var fn=function (){<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">  console.log(fn);</div><div class="line">&#125;;</div><div class="line">fn();//<span class="function"><span class="title">function</span></span> ()&#123;console.log(fn);&#125;;正确</div></pre></td></tr></table></figure></p>
<div class="image-package"><img src="http://upload-images.jianshu.io/upload_images/675733-ff61db72e84f3caf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br></div>

<p>结论是：使用var或是非对象内部的函数表达式内，可以访问到存放当前函数的变量；在对象内部的不能访问到。</p>
<p>原因也非常简单，因为<strong>函数作用域链</strong>的问题，采用var的是在外部创建了一个fn变量，函数内部当然可以在内部寻找不到fn后向上册作用域查找fn，而在创建对象内部时，因为没有在函数作用域内创建fn，所以无法访问。</p>
<p>所以综上所述，可以得知，<strong>最内层的return出去的<code>fun</code>函数不是第二层<code>fun</code>函数，是最外层的<code>fun</code>函数</strong>。</p>
<p>所以，三个<code>fun</code>函数的关系也理清楚了，第一个等于第三个，他们都不等于第二个。</p>
<h2 id="到底在调用哪个函数？"><a href="#到底在调用哪个函数？" class="headerlink" title="到底在调用哪个函数？"></a>到底在调用哪个函数？</h2><p>再看下原题，现在知道了程序中有两个<code>fun</code>函数(第一个和第三个相同)，遂接下来的问题是搞清楚，运行时他执行的是哪个<code>fun</code>函数？</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">function</span> fun(n,o) &#123;</div><div class="line">  console.log(o)</div><div class="line">  <span class="built_in">return</span> &#123;</div><div class="line">    fun:<span class="keyword">function</span>(m)&#123;</div><div class="line">      <span class="built_in">return</span> fun(m,n);</div><div class="line">    &#125;</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">var a = fun(0);  a.fun(1);  a.fun(2);  a.fun(3);//undefined,?,?,?</div><div class="line">var b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,?</div><div class="line">var c = fun(0).fun(1);  c.fun(2);  c.fun(3);//undefined,?,?,?</div><div class="line">//问:三行a,b,c的输出分别是什么？</div></pre></td></tr></table></figure>
<p><strong>1、第一行a</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var a = fun(0); a.fun(1); a.fun(2); a.fun(3);</div></pre></td></tr></table></figure>
<p>可以得知，第一个<code>fun(0)</code>是在调用<strong>第一层<code>fun</code>函数</strong>。第二个<code>fun(1)</code>是在调用前一个<code>fun</code>的返回值的<code>fun</code>函数，所以：<br>第后面几个<code>fun(1)</code>,<code>fun(2)</code>,<code>fun(3)</code>,函数都是在调用<strong>第二层<code>fun</code>函数</strong>。</p>
<p>遂：</p>
<p>在第一次调用<code>fun(0)</code>时，<code>o</code>为<code>undefined</code>；</p>
<p>第二次调用<code>fun(1)</code>时<code>m</code>为<code>1</code>，此时<code>fun</code>闭包了外层函数的<code>n</code>，也就是第一次调用的<code>n=0</code>，即<code>m=1</code>，<code>n=0</code>，并在内部调用第一层<code>fun</code>函数<code>fun(1,0);</code>所以<code>o</code>为<code>0</code>；</p>
<p>第三次调用<code>fun(2)</code>时<code>m</code>为<code>2</code>，但依然是调用<code>a.fun</code>，所以还是闭包了第一次调用时的n，所以内部调用第一层的<code>fun(2,0);</code>所以<code>o</code>为<code>0</code></p>
<p>第四次同理；</p>
<p>即：最终答案为<code>undefined,0,0,0</code></p>
<p><strong>2、第二行b</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var b = fun(0).fun(1).fun(2).fun(3);//undefined,?,?,?</div></pre></td></tr></table></figure>
<p>先从<code>fun(0)</code>开始看，肯定是调用的第一层<code>fun</code>函数；而他的返回值是一个对象，所以第二个<code>fun(1)</code>调用的是第二层<code>fun</code>函数，后面几个也是调用的第二层<code>fun</code>函数。</p>
<p>遂：</p>
<p>在第一次调用第一层<code>fun(0)</code>时，<code>o</code>为<code>undefined</code>；</p>
<p>第二次调用 <code>.fun(1)</code>时<code>m</code>为<code>1</code>，此时<code>fun</code>闭包了外层函数的<code>n</code>，也就是第一次调用的<code>n=0</code>，即<code>m=1</code>，<code>n=0</code>，并在内部调用第一层<code>fun</code>函数<code>fun(1,0);</code>所以<code>o</code>为<code>0</code>；</p>
<p>第三次调用 <code>.fun(2)</code>时<code>m</code>为<code>2</code>，此时当前的<code>fun</code>函数不是第一次执行的返回对象，而是<strong>第二次执行的返回对象</strong>。而在第二次执行第一层<code>fun</code>函数时时<code>(1,0)</code>所以<code>n=1</code>,<code>o=0</code>,返回时闭包了第二次的<code>n</code>，遂在第三次调用第三层<code>fun</code>函数时<code>m=2</code>,<code>n=1</code>，即调用第一层<code>fun</code>函数<code>fun(2,1)</code>，所以<code>o</code>为<code>1</code>；</p>
<p>第四次调用 <code>.fun(3)</code>时<code>m</code>为<code>3</code>，闭包了第三次调用的<code>n</code>，同理，最终调用第一层<code>fun</code>函数为<code>fun(3,2)</code>；所以<code>o</code>为<code>2</code>；</p>
<p>即最终答案：<code>undefined,0,1,2</code></p>
<p><strong>3、第三行c</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var c = fun(0).fun(1); c.fun(2); c.fun(3);//undefined,?,?,?</div></pre></td></tr></table></figure>
<p>根据前面两个例子，可以得知：</p>
<p><code>fun(0)</code>为执行第一层<code>fun</code>函数，<code>.fun(1)</code>执行的是<code>fun(0)</code>返回的第二层<code>fun</code>函数，这里语句结束，遂<code>c</code>存放的是<code>fun(1)</code>的返回值，而不是<code>fun(0)</code>的返回值，所以<code>c</code>中闭包的也是<code>fun(1)</code>第二次执行的<code>n</code>的值。<code>c.fun(2)</code>执行的是<code>fun(1)</code>返回的第二层<code>fun函数</code>，<code>c.fun(3)</code>执行的<strong>也</strong>是<code>fun(1)</code>返回的第二层<code>fun</code>函数。</p>
<p>遂：</p>
<p>在第一次调用第一层<code>fun(0)</code>时，<code>o</code>为<code>undefined</code>；</p>
<p>第二次调用 <code>.fun(1)</code>时<code>m</code>为<code>1</code>，此时<code>fun</code>闭包了外层函数的<code>n</code>，也就是第一次调用的<code>n=0</code>，即<code>m=1</code>，<code>n=0</code>，并在内部调用第一层<code>fun</code>函数<code>fun(1,0);</code>所以<code>o</code>为<code>0</code>；</p>
<p>第三次调用<code>.fun(2)</code>时<code>m</code>为<code>2</code>，此时<code>fun</code>闭包的是第二次调用的<code>n=1</code>，即<code>m=2</code>，<code>n=1</code>，并在内部调用第一层<code>fun</code>函数<code>fun(2,1);</code>所以<code>o</code>为<code>1</code>；</p>
<p>第四次<code>.fun(3)</code>时同理，但依然是调用的第二次的返回值，遂最终调用第一层<code>fun</code>函数<code>fun(3,1)</code>，所以<code>o</code>还为<code>1</code></p>
<p>即最终答案：<code>undefined,0,1,1</code></p>
<h2 id="后话"><a href="#后话" class="headerlink" title="后话"></a>后话</h2><p>这段代码原本是在做一个将异步回调改写为同步调用的组件时的代码，发现了这个坑，对JS的闭包有了更深入的了解。</p>
<p>关于什么是闭包，网上的文章数不胜数，但理解什么是闭包还是要在代码中自己去发现与领悟。</p>
<p>如果要我说什么是闭包，我认为，广义上的闭包就是指一个变量在他自身作用域外被使用了，就叫发生了闭包。</p>
<p>希望读者能通过本文对闭包现象有进一步的了解，如有其它见解或看法，欢迎指正或留言讨论。</p>
<p><strong> 作者：<a href="http://www.cnblogs.com/xxcanghai/" target="_blank" rel="external">小小沧海</a>  </strong><br><strong> 原文地址：<a href="http://www.cnblogs.com/xxcanghai/p/4991870.html" target="_blank" rel="external">http://www.cnblogs.com/xxcanghai/p/4991870.html</a> </strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;闭包：从字面意思来理解就是封闭和包裹，换句话说，就是在函数内部定义的变量，在函数的外部无法访问到，因此就说函数构成了一个闭包。说白了闭包是作用域的应用。计算机科学中对闭包的定义为：一个函数的函数体以及函数所处的环境，构成的一个综合体叫做：闭包函数体：就是函数内部的代码。函数所处的环境：指的就是作用域。是不是觉得计算机科学中对闭包的定义是不是很难理解。下面我就来我面试时遇到的一些闭包问题。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>强大的CSS3选择器</title>
    <link href="http://yoursite.com/2017/03/12/%E5%BC%BA%E5%A4%A7%E7%9A%84CSS3%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>http://yoursite.com/2017/03/12/强大的CSS3选择器/</id>
    <published>2017-03-12T09:47:49.000Z</published>
    <updated>2017-06-15T03:37:46.088Z</updated>
    
    <content type="html"><![CDATA[<p>每个前端工程师可能每天都会写一些css，其中选择器是很主要的一部分。但是，大家可能每天写的大多是#id,.class这样的选择器，这并不稀奇，但是如果我们了解并且熟用css3为我们提供的强大并且优雅的选择器，就可以简化我们的代码。<br>我在学习和整理css3的选择器的时候都不会去考虑它的浏览器的支持程度，如果有需要，可以在这里查看它的浏览器支持情况：「caniuse.com」。</p>
<a id="more"></a>
<h2 id="一、基本选择器"><a href="#一、基本选择器" class="headerlink" title="一、基本选择器"></a>一、基本选择器</h2><h3 id="1-通配选择器-「-」"><a href="#1-通配选择器-「-」" class="headerlink" title="1. 通配选择器 「*」"></a>1. 通配选择器 「*」</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">*&#123;margin: 0;padding: 0&#125; //选择页面中的所有元素并设置margin和padding值为0</div><div class="line">.demo *&#123;background:<span class="comment">#000&#125; //选择类名为demo的元素下面的所有元素并设置背景为黑色</span></div></pre></td></tr></table></figure>
<h3 id="2-元素选择器-「Element」"><a href="#2-元素选择器-「Element」" class="headerlink" title="2.元素选择器 「Element」"></a>2.元素选择器 「Element」</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">body&#123;background:<span class="comment">#ccc&#125; //选择body元素 </span></div><div class="line">ul&#123;background:<span class="comment">#fff&#125; //选择列表ul元素</span></div></pre></td></tr></table></figure>
<h3 id="3-ID选择器-「-id」"><a href="#3-ID选择器-「-id」" class="headerlink" title="3.ID选择器 「#id」"></a>3.ID选择器 「#id」</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;div id=<span class="string">"demo"</span>&gt;&lt;/div&gt;</div><div class="line">css:</div><div class="line"><span class="comment">#demo&#123;do something&#125;</span></div></pre></td></tr></table></figure>
<h3 id="4-类选择器-「-class」"><a href="#4-类选择器-「-class」" class="headerlink" title="4.类选择器 「.class」"></a>4.类选择器 「.class」</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;ul class=<span class="string">"demo"</span>&gt;&lt;/ul&gt;</div><div class="line">css:</div><div class="line">.demo&#123;<span class="keyword">do</span> something&#125;</div><div class="line">ul.demo&#123;<span class="keyword">do</span> something&#125; //这样只会选择有demo类名的ul元素</div></pre></td></tr></table></figure>
<h2 id="二、层次选择器"><a href="#二、层次选择器" class="headerlink" title="二、层次选择器"></a>二、层次选择器</h2><h3 id="6-后代选择器「E-F」"><a href="#6-后代选择器「E-F」" class="headerlink" title="6.后代选择器「E F」"></a>6.后代选择器「E F」</h3><p>选择匹配E的元素内的所有匹配F的元素。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">html：</div><div class="line">&lt;div class=<span class="string">"parent"</span>&gt;</div><div class="line">        &lt;div class=<span class="string">"child"</span>&gt;&lt;/div&gt;</div><div class="line">        &lt;div class=<span class="string">"child"</span>&gt;</div><div class="line">             &lt;div class=<span class="string">"c-child"</span>&gt;</div><div class="line">                  &lt;div class=<span class="string">"c-c-child"</span>&gt;&lt;/div&gt;</div><div class="line">            &lt;/div&gt;</div><div class="line">        &lt;/div&gt;    </div><div class="line">&lt;/div&gt;</div><div class="line"></div><div class="line">css:</div><div class="line"></div><div class="line">.parent div&#123;<span class="keyword">do</span> something&#125; //会选择parent里面的所有div，不管是子元素.child还是孙元素.c-child和.c-c-child</div></pre></td></tr></table></figure>
<h3 id="7-子选择器「E-gt-F」"><a href="#7-子选择器「E-gt-F」" class="headerlink" title="7.子选择器「E &gt; F」"></a>7.子选择器「E &gt; F」</h3><p>选择配配E的元素的匹配F的直系子元素。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">html：</div><div class="line">  &lt;div class=<span class="string">"parent"</span>&gt;</div><div class="line">          &lt;div class=<span class="string">"child"</span>&gt;&lt;/div&gt;</div><div class="line">          &lt;div class=<span class="string">"child"</span>&gt;</div><div class="line">               &lt;div class=<span class="string">"c-child"</span>&gt;</div><div class="line">                    &lt;div class=<span class="string">"c-c-child"</span>&gt;&lt;/div&gt;</div><div class="line">              &lt;/div&gt;</div><div class="line">          &lt;/div&gt;    </div><div class="line">  &lt;/div&gt;</div><div class="line"> </div><div class="line"> css:</div><div class="line"> .parent &gt; div&#123;<span class="keyword">do</span> something&#125; //只会选择.parent元素的直系子元素，也就是只会选择到 .child元素</div></pre></td></tr></table></figure>
<h3 id="8-相邻兄弟元素选择器「E-F」"><a href="#8-相邻兄弟元素选择器「E-F」" class="headerlink" title="8.相邻兄弟元素选择器「E + F」"></a>8.相邻兄弟元素选择器「E + F」</h3><p>E和F是同辈元素，具有相同的父元素，并且F元素紧邻在E元素的后面，此时可以使用相邻兄弟选择器。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;div&gt;</div><div class="line">    &lt;div class=<span class="string">"demo"</span>&gt;1&lt;/div&gt;</div><div class="line">    &lt;div&gt;2&lt;/div&gt;</div><div class="line">    &lt;div&gt;3&lt;/div&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line"> </div><div class="line"> css:</div><div class="line"> </div><div class="line"> .demo + div &#123;<span class="keyword">do</span> something&#125;//会选中内容为2的div</div></pre></td></tr></table></figure>
<h3 id="9-通用兄弟选择器「E-F」"><a href="#9-通用兄弟选择器「E-F」" class="headerlink" title="9.通用兄弟选择器「E ~ F」"></a>9.通用兄弟选择器「E ~ F」</h3><p>E和F是同辈元素，具有相同的父元素，并且F元素在E元素之后，E ~ F将选中E元素后面的所有F元素。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line"> &lt;div&gt;</div><div class="line">     &lt;div class=<span class="string">"demo"</span>&gt;1&lt;/div&gt;</div><div class="line">     &lt;div&gt;2&lt;/div&gt;</div><div class="line">     &lt;div&gt;3&lt;/div&gt;</div><div class="line">     &lt;div&gt;4&lt;/div&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line"> </div><div class="line"> css:</div><div class="line"> </div><div class="line">.demo ~ div &#123;<span class="keyword">do</span> something&#125;//会选中内容为2,3,4的div</div></pre></td></tr></table></figure>
<h2 id="三、伪类选择器"><a href="#三、伪类选择器" class="headerlink" title="三、伪类选择器"></a>三、伪类选择器</h2><h3 id="10-动态伪类选择器「E-link-E-visited-E-active-E-hover-E-focus」"><a href="#10-动态伪类选择器「E-link-E-visited-E-active-E-hover-E-focus」" class="headerlink" title="10.动态伪类选择器「E:link,E:visited,E:active,E:hover,E:focus」"></a>10.动态伪类选择器「E:link,E:visited,E:active,E:hover,E:focus」</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">E:link&#123;<span class="keyword">do</span> something&#125; //选择定义了超链接但链接还未被访问过的元素</div><div class="line">E:visited&#123;<span class="keyword">do</span> something&#125; //选择定义了超链接并且链接已经被访问过的元素</div><div class="line">E:active&#123;<span class="keyword">do</span> something&#125; //选择匹配的E元素，且元素被激活，常用在锚点和按钮上</div><div class="line">E:hover&#123;<span class="keyword">do</span> something&#125; //选择鼠标停留的匹配的E元素</div><div class="line">E:focus&#123;<span class="keyword">do</span> something&#125; //选择匹配的E元素，且元素获得焦点</div></pre></td></tr></table></figure>
<h3 id="11-目标伪类选择器「E-target」"><a href="#11-目标伪类选择器「E-target」" class="headerlink" title="11.目标伪类选择器「E:target」"></a>11.目标伪类选择器「E:target」</h3><p>选择匹配E的所有元素，且匹配元素被相关URL指向。</p>
<h3 id="12-语言伪类选择器「E-lang-language-」"><a href="#12-语言伪类选择器「E-lang-language-」" class="headerlink" title="12.语言伪类选择器「E:lang(language)」"></a>12.语言伪类选择器「E:lang(language)」</h3><p>用来选择指定了lang属性的元素，其值为language。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> html:</div><div class="line"> &lt;html lang=<span class="string">"en-US"</span>&gt;&lt;/html&gt;</div><div class="line"> </div><div class="line"> css:</div><div class="line"> :lang(en-US) &#123;<span class="keyword">do</span> something&#125;</div><div class="line">有时候网页切换不同的语言版本的时候，可以通过这个选择器做一些特殊的处理。</div></pre></td></tr></table></figure>
<h3 id="13-状态伪类选择器「E-checked-E-enabled-E-disabled」"><a href="#13-状态伪类选择器「E-checked-E-enabled-E-disabled」" class="headerlink" title="13.状态伪类选择器「E:checked,E:enabled,E:disabled」"></a>13.状态伪类选择器「E:checked,E:enabled,E:disabled」</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">E:checked&#123;<span class="keyword">do</span> something&#125; //匹配表单中被选中的单选按钮或复选按钮</div><div class="line">E:enabled&#123;<span class="keyword">do</span> something&#125; //匹配所有起用的表单元素</div><div class="line">E:disabled&#123;<span class="keyword">do</span> something&#125; //匹配所有禁用的表单元素</div></pre></td></tr></table></figure>
<h3 id="14-结构伪类选择器「E-first-child-E-last-child-E-root-E-nth-child-n-E-nth-last-child-n-E-nth-of-type-n-E-nth-last-of-type-n-E-first-of-type-E-last-of-type-E-only-child-E-only-of-type-E-empty」"><a href="#14-结构伪类选择器「E-first-child-E-last-child-E-root-E-nth-child-n-E-nth-last-child-n-E-nth-of-type-n-E-nth-last-of-type-n-E-first-of-type-E-last-of-type-E-only-child-E-only-of-type-E-empty」" class="headerlink" title="14.结构伪类选择器「E:first-child,E:last-child,E:root,E:nth-child(n),E:nth-last-child(n),E:nth-of-type(n),E:nth-last-of-type(n),E:first-of-type,E:last-of-type,E:only-child,E:only-of-type,E:empty」"></a>14.结构伪类选择器「E:first-child,E:last-child,E:root,E:nth-child(n),E:nth-last-child(n),E:nth-of-type(n),E:nth-last-of-type(n),E:first-of-type,E:last-of-type,E:only-child,E:only-of-type,E:empty」</h3><h3 id="14-1-E-first-child"><a href="#14-1-E-first-child" class="headerlink" title="14.1 [E:first-child]"></a>14.1 [E:first-child]</h3><p>用来选取特定元素的第一个子元素。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;1&lt;/li&gt;</div><div class="line">    &lt;li&gt;2&lt;/li&gt;</div><div class="line">    &lt;li&gt;3&lt;/li&gt;</div><div class="line">    &lt;li&gt;4&lt;/li&gt;</div><div class="line">    &lt;li&gt;5&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">css:</div><div class="line">ul &gt; li:first-child &#123;<span class="keyword">do</span> something&#125; //用来选取ul中的第一个li元素</div></pre></td></tr></table></figure>
<h3 id="14-2-E-last-child"><a href="#14-2-E-last-child" class="headerlink" title="14.2 [E:last-child]"></a>14.2 [E:last-child]</h3><p>用来选取特定元素的最后一个子元素。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;1&lt;/li&gt;</div><div class="line">    &lt;li&gt;2&lt;/li&gt;</div><div class="line">    &lt;li&gt;3&lt;/li&gt;</div><div class="line">    &lt;li&gt;4&lt;/li&gt;</div><div class="line">    &lt;li&gt;5&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">css:</div><div class="line">ul &gt; li:last-child &#123;<span class="keyword">do</span> something&#125; //用来选取ul中的最后一个li元素</div></pre></td></tr></table></figure>
<h3 id="14-3-E-nth-child-E-nth-last-child"><a href="#14-3-E-nth-child-E-nth-last-child" class="headerlink" title="14.3 [E:nth-child()],[E:nth-last-child()]"></a>14.3 [E:nth-child()],[E:nth-last-child()]</h3><p>用来选取某个父元素的一个或多个特定的子元素，其中的n可以是数值(从1开始)，也可以是包含n的表达式，也可以是odd(奇数)，even(偶数)。</p>
<p>E:nth-last-child()选择器的使用方法于E:nth-child()是相同的，不同的是E:nth-last-child()选择的元素是从父元素的最后一个子元素开始算起。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"> html:</div><div class="line">  &lt;ul&gt;</div><div class="line">      &lt;li&gt;1&lt;/li&gt;</div><div class="line">      &lt;li&gt;2&lt;/li&gt;</div><div class="line">      &lt;li&gt;3&lt;/li&gt;</div><div class="line">      &lt;li&gt;4&lt;/li&gt;</div><div class="line">      &lt;li&gt;5&lt;/li&gt;</div><div class="line">  &lt;/ul&gt;</div><div class="line">css:</div><div class="line"> ul &gt; li:nth-child(2n+1) &#123;<span class="keyword">do</span> something&#125; //用来选取ul中的第2n+1(奇数)个      li元素</div></pre></td></tr></table></figure>
<h3 id="14-4-E-root"><a href="#14-4-E-root" class="headerlink" title="14.4  [E:root]"></a>14.4  [E:root]</h3><p>用来匹配元素E所在的文档中的根元素，在html文档中根元素就始终是html。</p>
<h3 id="14-5-E-nth-of-type-E-nth-last-of-type"><a href="#14-5-E-nth-of-type-E-nth-last-of-type" class="headerlink" title="14.5 [E:nth-of-type(),E:nth-last-of-type()]"></a>14.5 [E:nth-of-type(),E:nth-last-of-type()]</h3><p>E:nth-of-type()只计算父元素中指定的某种类型的子元素，当某个元素的子元素类型不只是一种时，使用nth-of-type来选择会比较有用。</p>
<p>E:nth-last-of-type()的用法同E:nth-of-type()相同，不同的是:nth-last-of-type()也是从父元素的最后一个子元素开始算起。</p>
<p>li:nth-of-type(3)的话就会标识它只会选择第三个li元素，别的元素会忽略掉，如：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> html:</div><div class="line"> &lt;ul&gt;</div><div class="line">    &lt;li&gt;1&lt;/li&gt;</div><div class="line">    &lt;li&gt;2&lt;/li&gt;</div><div class="line">    &lt;div&gt;3&lt;/div&gt;</div><div class="line">    &lt;div&gt;4&lt;/div&gt;</div><div class="line">    &lt;li&gt;5&lt;/li&gt;</div><div class="line">    &lt;li&gt;6&lt;/li&gt;</div><div class="line">    &lt;li&gt;7&lt;/li&gt;</div><div class="line">    &lt;li&gt;8&lt;/li&gt;</div><div class="line">&lt;/ul&gt; </div><div class="line">ul &gt; li:nth-of-type(3)&#123;<span class="keyword">do</span> something&#125; //会选中内容为5的li元素</div></pre></td></tr></table></figure>
<p>但是使用nth-child就会是这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"> html:</div><div class="line">&lt;ul&gt;</div><div class="line">    &lt;li&gt;1&lt;/li&gt;</div><div class="line">    &lt;li&gt;2&lt;/li&gt;</div><div class="line">    &lt;div&gt;3&lt;/div&gt;</div><div class="line">    &lt;div&gt;4&lt;/div&gt;</div><div class="line">    &lt;li&gt;5&lt;/li&gt;</div><div class="line">    &lt;li&gt;6&lt;/li&gt;</div><div class="line">    &lt;li&gt;7&lt;/li&gt;</div><div class="line">    &lt;li&gt;8&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">ul &gt; li:nth-child(3)&#123;<span class="keyword">do</span> something&#125; //会选中内容为3的div元素</div></pre></td></tr></table></figure>
<h3 id="14-6-E-first-of-type-E-last-of-type"><a href="#14-6-E-first-of-type-E-last-of-type" class="headerlink" title="14.6 [E:first-of-type,E:last-of-type]"></a>14.6 [E:first-of-type,E:last-of-type]</h3><p>:first-of-type和:last-of-type这两个选择器类似于:first-child和:last-child，不同的就是指定了元素的类型。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line"> &lt;ul&gt;</div><div class="line">     &lt;div&gt;1&lt;/div&gt;</div><div class="line">     &lt;div&gt;2&lt;/div&gt;</div><div class="line">     &lt;li&gt;3&lt;/li&gt;</div><div class="line">     &lt;li&gt;4&lt;/li&gt;</div><div class="line">     &lt;li&gt;5&lt;/li&gt;</div><div class="line">     &lt;li&gt;6&lt;/li&gt;</div><div class="line">&lt;/ul&gt;</div><div class="line">CSS：</div><div class="line">ul &gt; li:first-of-type&#123;<span class="keyword">do</span> something&#125; //会选中内容为3的li元素</div></pre></td></tr></table></figure>
<h3 id="14-7-E-only-child"><a href="#14-7-E-only-child" class="headerlink" title="14.7 [E:only-child]"></a>14.7 [E:only-child]</h3><h4 id="匹配的元素E是其父元素的唯一子元素，也就是说匹配元素的父元素只有一个子元素。"><a href="#匹配的元素E是其父元素的唯一子元素，也就是说匹配元素的父元素只有一个子元素。" class="headerlink" title="匹配的元素E是其父元素的唯一子元素，也就是说匹配元素的父元素只有一个子元素。"></a>匹配的元素E是其父元素的唯一子元素，也就是说匹配元素的父元素只有一个子元素。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;div class=<span class="string">"demo"</span>&gt;</div><div class="line">   &lt;p&gt;1-1&lt;/p&gt;</div><div class="line">   &lt;p&gt;1-2&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">&lt;div class=<span class="string">"demo"</span>&gt;</div><div class="line">   &lt;p&gt;2-1&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">css:</div><div class="line">.demo &gt; p:only-child&#123;<span class="keyword">do</span> something&#125;//会选取到内容为2-1的p元素</div></pre></td></tr></table></figure>
<h3 id="14-8-E-only-of-type"><a href="#14-8-E-only-of-type" class="headerlink" title="14.8 [E:only-of-type]"></a>14.8 [E:only-of-type]</h3><h4 id="only-of-type用来选择一个元素，他的类型在他父元素的所有子元素中是唯一的。也就是说，一个父元素有很多子元素，而其中只有一个子元素的类型是唯一的，那么就可以使用-only-of-type来选取这个元素。"><a href="#only-of-type用来选择一个元素，他的类型在他父元素的所有子元素中是唯一的。也就是说，一个父元素有很多子元素，而其中只有一个子元素的类型是唯一的，那么就可以使用-only-of-type来选取这个元素。" class="headerlink" title=":only-of-type用来选择一个元素，他的类型在他父元素的所有子元素中是唯一的。也就是说，一个父元素有很多子元素，而其中只有一个子元素的类型是唯一的，那么就可以使用:only-of-type来选取这个元素。"></a>:only-of-type用来选择一个元素，他的类型在他父元素的所有子元素中是唯一的。也就是说，一个父元素有很多子元素，而其中只有一个子元素的类型是唯一的，那么就可以使用:only-of-type来选取这个元素。</h4><p>这个属性说起来有点绕口，写了个简陋的demo说明意思：[查看源码][运行demo]</p>
<h3 id="14-9-E-empty"><a href="#14-9-E-empty" class="headerlink" title="14.9 [E:empty]"></a>14.9 [E:empty]</h3><h4 id="empty用来选择没有任何内容的元素，哪怕是一个空格都没有的元素。"><a href="#empty用来选择没有任何内容的元素，哪怕是一个空格都没有的元素。" class="headerlink" title=":empty用来选择没有任何内容的元素，哪怕是一个空格都没有的元素。"></a>:empty用来选择没有任何内容的元素，哪怕是一个空格都没有的元素。</h4><h3 id="15-否定伪类选择器「E-not-F-」"><a href="#15-否定伪类选择器「E-not-F-」" class="headerlink" title="15 否定伪类选择器「E:not(F)」"></a>15 否定伪类选择器「E:not(F)」</h3><h4 id="可以用来选取所有除了F外的所有元素。"><a href="#可以用来选取所有除了F外的所有元素。" class="headerlink" title="可以用来选取所有除了F外的所有元素。"></a>可以用来选取所有除了F外的所有元素。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">1 input:not([<span class="built_in">type</span>=submit])&#123;<span class="keyword">do</span> something&#125; //可以用来给表单的所有input元素定义样式，除了submit按钮之外</div></pre></td></tr></table></figure>
<h2 id="四、伪元素"><a href="#四、伪元素" class="headerlink" title="四、伪元素"></a>四、伪元素</h2><h4 id="以前我们使用的伪元素是-first-letter-first-line-before-after-这样的。但css3定义的伪元素变成了双冒号，主要用来区分伪类和伪元素。对于IE6-8-仅支持单冒号表示方法，但是其他现代浏览器两种表示方法是都可以的，也就是说在现代浏览器中伪元素使用双冒号和单冒号都是会识别的。"><a href="#以前我们使用的伪元素是-first-letter-first-line-before-after-这样的。但css3定义的伪元素变成了双冒号，主要用来区分伪类和伪元素。对于IE6-8-仅支持单冒号表示方法，但是其他现代浏览器两种表示方法是都可以的，也就是说在现代浏览器中伪元素使用双冒号和单冒号都是会识别的。" class="headerlink" title="以前我们使用的伪元素是:first-letter,:first-line,:before,:after,这样的。但css3定义的伪元素变成了双冒号，主要用来区分伪类和伪元素。对于IE6-8,仅支持单冒号表示方法，但是其他现代浏览器两种表示方法是都可以的，也就是说在现代浏览器中伪元素使用双冒号和单冒号都是会识别的。"></a>以前我们使用的伪元素是:first-letter,:first-line,:before,:after,这样的。但css3定义的伪元素变成了双冒号，主要用来区分伪类和伪元素。对于IE6-8,仅支持单冒号表示方法，但是其他现代浏览器两种表示方法是都可以的，也就是说在现代浏览器中伪元素使用双冒号和单冒号都是会识别的。</h4><h3 id="16-「-first-letter」"><a href="#16-「-first-letter」" class="headerlink" title="16. 「::first-letter」"></a>16. 「::first-letter」</h3><h5 id="first-letter用来选择文本块的第一个字母-常用于文本排版方面。"><a href="#first-letter用来选择文本块的第一个字母-常用于文本排版方面。" class="headerlink" title="::first-letter用来选择文本块的第一个字母,常用于文本排版方面。"></a>::first-letter用来选择文本块的第一个字母,常用于文本排版方面。</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"> html：</div><div class="line"> &lt;div&gt;</div><div class="line">     &lt;p&gt;this is <span class="built_in">test</span> line.....&lt;/p&gt;</div><div class="line"> &lt;/div&gt;</div><div class="line">css:</div><div class="line">div p::first-letter&#123;<span class="keyword">do</span> something&#125; //将会选中&lt;p&gt;中的第一个字母t</div></pre></td></tr></table></figure>
<h3 id="17-「-first-line」"><a href="#17-「-first-line」" class="headerlink" title="17. 「::first-line」"></a>17. 「::first-line」</h3><h4 id="first-line用于匹配元素的第一行文本，也是常用于文本排版。"><a href="#first-line用于匹配元素的第一行文本，也是常用于文本排版。" class="headerlink" title="::first-line用于匹配元素的第一行文本，也是常用于文本排版。"></a>::first-line用于匹配元素的第一行文本，也是常用于文本排版。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">html：</div><div class="line">  &lt;div&gt;</div><div class="line">      &lt;p&gt;</div><div class="line">         this is first line..........省略.......</div><div class="line">         this is the second line ...省略....</div><div class="line">     &lt;/p&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"> css:</div><div class="line">div p::first-line&#123;<span class="keyword">do</span> something&#125; //将会选中&lt;p&gt;中的第一行文字</div></pre></td></tr></table></figure>
<h3 id="18-「-before-after」"><a href="#18-「-before-after」" class="headerlink" title="18. 「::before,::after」"></a>18. 「::before,::after」</h3><h4 id="before-after同我们之前熟用的-before和-after使用方法相同，它们不是指存于标记中的内容，是配合使用content属性可以插入额外内容的位置，尽管生成的内容不会成为DOM的一部分，但它同样可以设置样式。"><a href="#before-after同我们之前熟用的-before和-after使用方法相同，它们不是指存于标记中的内容，是配合使用content属性可以插入额外内容的位置，尽管生成的内容不会成为DOM的一部分，但它同样可以设置样式。" class="headerlink" title="::before,::after同我们之前熟用的:before和:after使用方法相同，它们不是指存于标记中的内容，是配合使用content属性可以插入额外内容的位置，尽管生成的内容不会成为DOM的一部分，但它同样可以设置样式。"></a>::before,::after同我们之前熟用的:before和:after使用方法相同，它们不是指存于标记中的内容，是配合使用content属性可以插入额外内容的位置，尽管生成的内容不会成为DOM的一部分，但它同样可以设置样式。</h4><h3 id="19-「-selection」"><a href="#19-「-selection」" class="headerlink" title="19. 「::selection」"></a>19. 「::selection」</h3><h4 id="css3新定义的伪元素-selection用来匹配突出显示的文本。但是使用前需要确认浏览器对它的支持程度。"><a href="#css3新定义的伪元素-selection用来匹配突出显示的文本。但是使用前需要确认浏览器对它的支持程度。" class="headerlink" title="css3新定义的伪元素::selection用来匹配突出显示的文本。但是使用前需要确认浏览器对它的支持程度。"></a>css3新定义的伪元素::selection用来匹配突出显示的文本。但是使用前需要确认浏览器对它的支持程度。</h4><h4 id="浏览器默认的情况下，我们选中的文本背景是蓝色，字体是白色。通过使用-selection，我们可以改变它的效果。"><a href="#浏览器默认的情况下，我们选中的文本背景是蓝色，字体是白色。通过使用-selection，我们可以改变它的效果。" class="headerlink" title="浏览器默认的情况下，我们选中的文本背景是蓝色，字体是白色。通过使用::selection，我们可以改变它的效果。"></a>浏览器默认的情况下，我们选中的文本背景是蓝色，字体是白色。通过使用::selection，我们可以改变它的效果。</h4><h4 id="1-selection-background-ccc-color-red-这样改写后我们选中的文本背景颜色和文字颜色就可以自定义了"><a href="#1-selection-background-ccc-color-red-这样改写后我们选中的文本背景颜色和文字颜色就可以自定义了" class="headerlink" title="1 ::selection{background:#ccc;color:red} //这样改写后我们选中的文本背景颜色和文字颜色就可以自定义了"></a>1 ::selection{background:#ccc;color:red} //这样改写后我们选中的文本背景颜色和文字颜色就可以自定义了</h4><h4 id="但是需要注意的是，-selection仅接受两个属性，一个是background，一个是color。"><a href="#但是需要注意的是，-selection仅接受两个属性，一个是background，一个是color。" class="headerlink" title="但是需要注意的是，::selection仅接受两个属性，一个是background，一个是color。"></a>但是需要注意的是，::selection仅接受两个属性，一个是background，一个是color。</h4><h2 id="五、属性选择器"><a href="#五、属性选择器" class="headerlink" title="五、属性选择器"></a>五、属性选择器</h2><h4 id="在html中，通过给元素添加属性，给以给元素添加一些附加的信息，属性选择器就可以通过定位属性来选取特定的元素。"><a href="#在html中，通过给元素添加属性，给以给元素添加一些附加的信息，属性选择器就可以通过定位属性来选取特定的元素。" class="headerlink" title="在html中，通过给元素添加属性，给以给元素添加一些附加的信息，属性选择器就可以通过定位属性来选取特定的元素。"></a>在html中，通过给元素添加属性，给以给元素添加一些附加的信息，属性选择器就可以通过定位属性来选取特定的元素。</h4><h3 id="20-「-E-attr-」"><a href="#20-「-E-attr-」" class="headerlink" title="20. 「 E[attr] 」"></a>20. 「 E[attr] 」</h3><p>用来选择有某个属性的元素，不论这个属性的值是什么。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;div id=<span class="string">"demo"</span>&gt;</div><div class="line">  &lt;a href=<span class="string">""</span> id=<span class="string">"test"</span>&gt;&lt;/a&gt;</div><div class="line">  &lt;a href=<span class="string">"www.taobao.com"</span> class=<span class="string">"taobao"</span>&gt;&lt;/a&gt;</div><div class="line">  &lt;a href=<span class="string">"#"</span>  id=<span class="string">"show"</span>&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">css:</div><div class="line">a[id]&#123;<span class="keyword">do</span> something&#125; //将会选择具有id属性的a标签</div></pre></td></tr></table></figure>
<h3 id="21-「-E-attr-val-」"><a href="#21-「-E-attr-val-」" class="headerlink" title="21. 「 E[attr=val] 」"></a>21. 「 E[attr=val] 」</h3><p>用来选取具有属性attr并且属性值为val的元素。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">&lt;div id=<span class="string">"demo"</span>&gt;</div><div class="line">  &lt;a href=<span class="string">""</span> id=<span class="string">"test"</span> title=<span class="string">"test"</span>&gt;&lt;/a&gt;</div><div class="line">  &lt;a href=<span class="string">"www.taobao.com"</span> class=<span class="string">"taobao"</span>&gt;&lt;/a&gt;</div><div class="line">  &lt;a href=<span class="string">"#"</span>  id=<span class="string">"show"</span> title=<span class="string">"test"</span>&gt;</div><div class="line">/div&gt;</div><div class="line">css:</div><div class="line">a[id=<span class="built_in">test</span>][title]&#123;<span class="keyword">do</span> something&#125; //将会选择具有id属性值为<span class="built_in">test</span>且具有title属性的a标签</div></pre></td></tr></table></figure>
<h3 id="22-「-E-attr-val-」"><a href="#22-「-E-attr-val-」" class="headerlink" title="22. 「 E[attr|=val] 」"></a>22. 「 E[attr|=val] 」</h3><p>E[attr|=val]用来选择具有属性attr且属性的值为val或以val-开头的元素(其中-是不可或缺的)。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line"> &lt;div id=<span class="string">"demo"</span>&gt;</div><div class="line">   &lt;a href=<span class="string">""</span> id=<span class="string">"test"</span> title=<span class="string">"test"</span> lang=<span class="string">"zh"</span>&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=<span class="string">"www.taobao.com"</span> class=<span class="string">"taobao"</span> lang=<span class="string">"zh-cn"</span>&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=<span class="string">"#"</span>  id=<span class="string">"show"</span> title=<span class="string">"test"</span>&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">css:</div><div class="line"> a[lang|=zh]&#123;<span class="keyword">do</span> something&#125; //将会选择具有lang属性值为zh或属性值以zh开头的a标签</div></pre></td></tr></table></figure>
<h3 id="23-「-E-attr-val-」"><a href="#23-「-E-attr-val-」" class="headerlink" title="23. 「 E[attr~=val] 」"></a>23. 「 E[attr~=val] 」</h3><p>当某个元素的某个属性具有多个用空格隔开的属性值，此时使用E[attr~=val]只要attr属性多个属性值中有一个于val匹配元素就会被选中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line"> &lt;div id=<span class="string">"demo"</span>&gt;</div><div class="line">   &lt;a href=<span class="string">""</span> id=<span class="string">"test"</span> title=<span class="string">"test first"</span>&gt;&lt;/a&gt;</div><div class="line">   &lt;a href=<span class="string">"www.taobao.com"</span> class=<span class="string">"taobao web"</span> title=<span class="string">"second test"</span>&gt;      </div><div class="line">   &lt;a href=<span class="string">"#"</span>  id=<span class="string">"show"</span> title=<span class="string">"test"</span>&gt;</div><div class="line">&lt;/div&gt;</div><div class="line"> css:</div><div class="line"> a[title~=<span class="built_in">test</span>]&#123;<span class="keyword">do</span> something&#125; //将会选择具有title属性且其中一个属性值为<span class="built_in">test</span>的a标签</div></pre></td></tr></table></figure>
<h3 id="24-「-E-attr-val-」"><a href="#24-「-E-attr-val-」" class="headerlink" title="24. 「 E[attr*=val] 」"></a>24. 「 E[attr*=val] 」</h3><p>这个属性选择器使用了通配符，用来选择具有属性attr并且只要属性值中包含val字符串的元素。也就是说只要所选属性中有val字符串，不管是不是多个用空格分隔的属性值，都将被选中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">html:</div><div class="line">   &lt;div id=<span class="string">"demo"</span>&gt;</div><div class="line">     &lt;a href=<span class="string">""</span> id=<span class="string">"test"</span> title=<span class="string">"test first"</span>&gt;&lt;/a&gt;</div><div class="line">     &lt;a href=<span class="string">"www.taobao.com"</span> class=<span class="string">"taobao web"</span> title=<span class="string">"secondtest"</span>&gt;       &lt;/a&gt;</div><div class="line">     &lt;a href=<span class="string">"#"</span>  id=<span class="string">"show"</span> title=<span class="string">"testlink"</span>&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line"> css:</div><div class="line">   a[title*=<span class="built_in">test</span>]&#123;<span class="keyword">do</span> something&#125; //将会选择具有title属性且其属性值包含<span class="built_in">test</span>字符串的a标签</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;每个前端工程师可能每天都会写一些css，其中选择器是很主要的一部分。但是，大家可能每天写的大多是#id,.class这样的选择器，这并不稀奇，但是如果我们了解并且熟用css3为我们提供的强大并且优雅的选择器，就可以简化我们的代码。&lt;br&gt;我在学习和整理css3的选择器的时候都不会去考虑它的浏览器的支持程度，如果有需要，可以在这里查看它的浏览器支持情况：「caniuse.com」。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CSS3" scheme="http://yoursite.com/tags/CSS3/"/>
    
  </entry>
  
</feed>
