[{"title":"神通广大的CSS3","url":"/2017/06/14/神通广大的CSS3选择器/","content":"\n\n\n每个前端工程师可能每天都会写一些css，其中选择器是很主要的一部分。但是，大家可能每天写的大多是#id,.class这样的选择器，这并不稀奇，但是如果我们了解并且熟用css3为我们提供的强大并且优雅的选择器，就可以简化我们的代码。\n我在学习和整理css3的选择器的时候都不会去考虑它的浏览器的支持程度，如果有需要，可以在这里查看它的浏览器支持情况：「caniuse.com」。\n\n<!--more-->\n\n## 一、基本选择器\n\n###  1. 通配选择器 「*」\n\n``` bash\n*{margin: 0;padding: 0} //选择页面中的所有元素并设置margin和padding值为0\n.demo *{background:#000} //选择类名为demo的元素下面的所有元素并设置背景为黑色\n```\n\n\n\n### 2.元素选择器 「Element」\n\n``` bash\n body{background:#ccc} //选择body元素 \n ul{background:#fff} //选择列表ul元素\n```\n\n\n\n### 3.ID选择器 「#id」\n\n``` bash\n html:\n <div id=\"demo\"></div>\n css:\n #demo{do something}\n```\n\n\n\n### 4.类选择器 「.class」\n\n``` bash\n html:\n <ul class=\"demo\"></ul>\n css:\n .demo{do something}\n ul.demo{do something} //这样只会选择有demo类名的ul元素\n```\n\n## 二、层次选择器\n\n###  6.后代选择器「E F」\n\n选择匹配E的元素内的所有匹配F的元素。\n\n``` bash\nhtml：\n<div class=\"parent\">\n        <div class=\"child\"></div>\n        <div class=\"child\">\n             <div class=\"c-child\">\n                  <div class=\"c-c-child\"></div>\n            </div>\n        </div>    \n</div>\n\ncss:\n\n.parent div{do something} //会选择parent里面的所有div，不管是子元素.child还是孙元素.c-child和.c-c-child\n```\n\n\n\n###  7.子选择器「E > F」\n\n选择配配E的元素的匹配F的直系子元素。\n\n``` bash\nhtml：\n  <div class=\"parent\">\n          <div class=\"child\"></div>\n          <div class=\"child\">\n               <div class=\"c-child\">\n                    <div class=\"c-c-child\"></div>\n              </div>\n          </div>    \n  </div>\n \n css:\n .parent > div{do something} //只会选择.parent元素的直系子元素，也就是只会选择到 .child元素\n```\n\n\n### 8.相邻兄弟元素选择器「E + F」 \n\nE和F是同辈元素，具有相同的父元素，并且F元素紧邻在E元素的后面，此时可以使用相邻兄弟选择器。\n\n``` bash\nhtml:\n<div>\n    <div class=\"demo\">1</div>\n    <div>2</div>\n    <div>3</div>\n </div>\n \n css:\n \n .demo + div {do something}//会选中内容为2的div\n```\n\n\n###9.通用兄弟选择器「E ~ F」\n\nE和F是同辈元素，具有相同的父元素，并且F元素在E元素之后，E ~ F将选中E元素后面的所有F元素。\n\n``` bash\nhtml:\n <div>\n     <div class=\"demo\">1</div>\n     <div>2</div>\n     <div>3</div>\n     <div>4</div>\n </div>\n \n css:\n \n.demo ~ div {do something}//会选中内容为2,3,4的div\n```\n\n\n##三、伪类选择器\n\n###10.动态伪类选择器「E:link,E:visited,E:active,E:hover,E:focus」\n\n``` bash\nE:link{do something} //选择定义了超链接但链接还未被访问过的元素\nE:visited{do something} //选择定义了超链接并且链接已经被访问过的元素\nE:active{do something} //选择匹配的E元素，且元素被激活，常用在锚点和按钮上\nE:hover{do something} //选择鼠标停留的匹配的E元素\nE:focus{do something} //选择匹配的E元素，且元素获得焦点\n```\n\n###11.目标伪类选择器「E:target」\n\n选择匹配E的所有元素，且匹配元素被相关URL指向。\n\n\n###12.语言伪类选择器「E:lang(language)」\n\n用来选择指定了lang属性的元素，其值为language。\n\n``` bash\n html:\n <html lang=\"en-US\"></html>\n \n css:\n :lang(en-US) {do something}\n有时候网页切换不同的语言版本的时候，可以通过这个选择器做一些特殊的处理。\n```\n\n\n###13.状态伪类选择器「E:checked,E:enabled,E:disabled」\n\n```bash\nE:checked{do something} //匹配表单中被选中的单选按钮或复选按钮\nE:enabled{do something} //匹配所有起用的表单元素\nE:disabled{do something} //匹配所有禁用的表单元素\n```\n\n###14.结构伪类选择器「E:first-child,E:last-child,E:root,E:nth-child(n),E:nth-last-child(n),E:nth-of-type(n),E:nth-last-of-type(n),E:first-of-type,E:last-of-type,E:only-child,E:only-of-type,E:empty」\n\n \n\n###14.1 [E:first-child]\n\n用来选取特定元素的第一个子元素。\n\n```bash\nhtml:\n<ul>\n    <li>1</li>\n    <li>2</li>\n    <li>3</li>\n    <li>4</li>\n    <li>5</li>\n</ul>\ncss:\nul > li:first-child {do something} //用来选取ul中的第一个li元素\n```\n\n\n###14.2 [E:last-child]\n\n用来选取特定元素的最后一个子元素。\n\n```bash\n html:\n <ul>\n     <li>1</li>\n     <li>2</li>\n     <li>3</li>\n     <li>4</li>\n     <li>5</li>\n </ul>\n css:\n ul > li:last-child {do something} //用来选取ul中的最后一个li元素\n```\n\n\n###14.3 [E:nth-child()],[E:nth-last-child()]\n\n用来选取某个父元素的一个或多个特定的子元素，其中的n可以是数值(从1开始)，也可以是包含n的表达式，也可以是odd(奇数)，even(偶数)。\n\nE:nth-last-child()选择器的使用方法于E:nth-child()是相同的，不同的是E:nth-last-child()选择的元素是从父元素的最后一个子元素开始算起。\n\n```bash\n html:\n  <ul>\n      <li>1</li>\n      <li>2</li>\n      <li>3</li>\n      <li>4</li>\n      <li>5</li>\n  </ul>\ncss:\n ul > li:nth-child(2n+1) {do something} //用来选取ul中的第2n+1(奇数)个      li元素\n```\n\n\n###14.4  [E:root]\n\n用来匹配元素E所在的文档中的根元素，在html文档中根元素就始终是html。\n\n \n\n###14.5 [E:nth-of-type(),E:nth-last-of-type()]\n\nE:nth-of-type()只计算父元素中指定的某种类型的子元素，当某个元素的子元素类型不只是一种时，使用nth-of-type来选择会比较有用。\n\nE:nth-last-of-type()的用法同E:nth-of-type()相同，不同的是:nth-last-of-type()也是从父元素的最后一个子元素开始算起。\n\nli:nth-of-type(3)的话就会标识它只会选择第三个li元素，别的元素会忽略掉，如：\n\n```bash\n html:\n <ul>\n    <li>1</li>\n    <li>2</li>\n    <div>3</div>\n    <div>4</div>\n 7     <li>5</li>\n 8     <li>6</li>\n 9     <li>7</li>\n10     <li>8</li>\n11 </ul>\n12 \n13 ul > li:nth-of-type(3){do something} //会选中内容为5的li元素 \n复制代码\n但是使用nth-child就会是这样：\n\n复制代码\n 1 html:\n 2 <ul>\n 3     <li>1</li>\n 4     <li>2</li>\n 5     <div>3</div>\n 6     <div>4</div>\n 7     <li>5</li>\n 8     <li>6</li>\n 9     <li>7</li>\n10     <li>8</li>\n11 </ul>\n12 \n13 ul > li:nth-child(3){do something} //会选中内容为3的div元素\n复制代码\n\n\n14.6 [E:first-of-type,E:last-of-type]\n\n:first-of-type和:last-of-type这两个选择器类似于:first-child和:last-child，不同的就是指定了元素的类型。\n\n复制代码\n 1  html:\n 2   <ul>\n 3       <div>1</div>\n 4       <div>2</div>\n 5       <li>3</li>\n 6       <li>4</li>\n 7       <li>5</li>\n 8       <li>6</li>\n 9  </ul>\n10  CSS：\n11  ul > li:first-of-type{do something} //会选中内容为3的li元素\n复制代码\n\n\n14.7 [E:only-child]\n\n匹配的元素E是其父元素的唯一子元素，也就是说匹配元素的父元素只有一个子元素。\n\n复制代码\n 1 html:\n 2 <div class=\"demo\">\n 3    <p>1-1</p>\n 4    <p>1-2</p>\n 5 </div>\n 6 <div class=\"demo\">\n 7    <p>2-1</p>\n 8 </div>\n 9 \n10 css:\n11 .demo > p:only-child{do something}//会选取到内容为2-1的p元素\n复制代码\n\n\n14.8 [E:only-of-type]\n\n:only-of-type用来选择一个元素，他的类型在他父元素的所有子元素中是唯一的。也就是说，一个父元素有很多子元素，而其中只有一个子元素的类型是唯一的，那么就可以使用:only-of-type来选取这个元素。\n\n这个属性说起来有点绕口，写了个简陋的demo说明意思：[查看源码][运行demo]\n\n \n\n14.9 [E:empty]\n\n:empty用来选择没有任何内容的元素，哪怕是一个空格都没有的元素。\n\n \n\n15 否定伪类选择器「E:not(F)」\n\n可以用来选取所有除了F外的所有元素。\n\n1 input:not([type=submit]){do something} //可以用来给表单的所有input元素定义样式，除了submit按钮之外\n\n\n四、伪元素\n\n 以前我们使用的伪元素是:first-letter,:first-line,:before,:after,这样的。但css3定义的伪元素变成了双冒号，主要用来区分伪类和伪元素。对于IE6-8,仅支持单冒号表示方法，但是其他现代浏览器两种表示方法是都可以的，也就是说在现代浏览器中伪元素使用双冒号和单冒号都是会识别的。\n\n16. 「::first-letter」\n\n::first-letter用来选择文本块的第一个字母,常用于文本排版方面。\n\n复制代码\n1  html：\n2  <div>\n3      <p>this is test line.....</p>\n4  </div>\n5 \n6 css:\n7 \n8 div p::first-letter{do something} //将会选中<p>中的第一个字母t\n复制代码\n\n\n17. 「::first-line」\n\n::first-line用于匹配元素的第一行文本，也是常用于文本排版。\n\n复制代码\n 1  html：\n 2   <div>\n 3       <p>\n 4          this is first line..........省略.......\n 5          this is the second line ...省略....\n 6      </p>\n 7   </div>\n 8  \n 9  css:\n10  \n11  div p::first-line{do something} //将会选中<p>中的第一行文字\n复制代码\n\n\n18. 「::before,::after」\n\n::before,::after同我们之前熟用的:before和:after使用方法相同，它们不是指存于标记中的内容，是配合使用content属性可以插入额外内容的位置，尽管生成的内容不会成为DOM的一部分，但它同样可以设置样式。\n\n \n\n19. 「::selection」\n\ncss3新定义的伪元素::selection用来匹配突出显示的文本。但是使用前需要确认浏览器对它的支持程度。\n\n浏览器默认的情况下，我们选中的文本背景是蓝色，字体是白色。通过使用::selection，我们可以改变它的效果。\n\n1 ::selection{background:#ccc;color:red} //这样改写后我们选中的文本背景颜色和文字颜色就可以自定义了\n但是需要注意的是，::selection仅接受两个属性，一个是background，一个是color。\n\n \n\n五、属性选择器\n\n在html中，通过给元素添加属性，给以给元素添加一些附加的信息，属性选择器就可以通过定位属性来选取特定的元素。\n\n20. 「 E[attr] 」\n\n用来选择有某个属性的元素，不论这个属性的值是什么。\n\n复制代码\n1 html:\n2 <div id=\"demo\">\n3   <a href=\"\" id=\"test\"></a>\n4   <a href=\"www.taobao.com\" class=\"taobao\"></a>\n5   <a href=\"#\"  id=\"show\">\n6 </div>\n7 css:\n8 a[id]{do something} //将会选择具有id属性的a标签\n复制代码\n\n\n21. 「 E[attr=val] 」\n\n用来选取具有属性attr并且属性值为val的元素。\n\n复制代码\n1  html:\n2  <div id=\"demo\">\n3    <a href=\"\" id=\"test\" title=\"test\"></a>\n4    <a href=\"www.taobao.com\" class=\"taobao\"></a>\n5    <a href=\"#\"  id=\"show\" title=\"test\">\n6 </div>\n7  css:\n8  a[id=test][title]{do something} //将会选择具有id属性值为test且具有title属性的a标签\n复制代码\n\n\n22. 「 E[attr|=val] 」\n\nE[attr|=val]用来选择具有属性attr且属性的值为val或以val-开头的元素(其中-是不可或缺的)。\n\n复制代码\n1  html:\n2   <div id=\"demo\">\n3     <a href=\"\" id=\"test\" title=\"test\" lang=\"zh\"></a>\n4     <a href=\"www.taobao.com\" class=\"taobao\" lang=\"zh-cn\"></a>\n5     <a href=\"#\"  id=\"show\" title=\"test\">\n6  </div>\n7  css:\n8   a[lang|=zh]{do something} //将会选择具有lang属性值为zh或属性值以zh开头的a标签\n复制代码\n\n\n23. 「 E[attr~=val] 」\n\n当某个元素的某个属性具有多个用空格隔开的属性值，此时使用E[attr~=val]只要attr属性多个属性值中有一个于val匹配元素就会被选中。\n\n复制代码\n1  html:\n2   <div id=\"demo\">\n3     <a href=\"\" id=\"test\" title=\"test first\"></a>\n4     <a href=\"www.taobao.com\" class=\"taobao web\" title=\"second test\"></a>\n5     <a href=\"#\"  id=\"show\" title=\"test\">\n6  </div>\n7   css:\n8   a[title~=test]{do something} //将会选择具有title属性且其中一个属性值为test的a标签\n复制代码\n\n\n24. 「 E[attr*=val] 」\n\n这个属性选择器使用了通配符，用来选择具有属性attr并且只要属性值中包含val字符串的元素。也就是说只要所选属性中有val字符串，不管是不是多个用空格分隔的属性值，都将被选中。\n\n复制代码\n1  html:\n2     <div id=\"demo\">\n3       <a href=\"\" id=\"test\" title=\"test first\"></a>\n4       <a href=\"www.taobao.com\" class=\"taobao web\" title=\"secondtest\"></a>\n5       <a href=\"#\"  id=\"show\" title=\"testlink\">\n6    </div>\n7   css:\n8     a[title*=test]{do something} //将会选择具有title属性且其属性值包含test字符串的a标签\n复制代码\n\n\n25. 「 E[attr^=val] 」\n\n用来选择属性attr的属性值是以val开头的所有元素，注意它与E[attr|=val]的区别，attr|=val中-是必不可少的，也就是说以val-开头。\n\n复制代码\n1  html:\n2      <div id=\"demo\">\n3        <a href=\"\u001fhttp://zhangmengxue.com\" id=\"test\" title=\"test first\"></a>\n4        <a href=\"www.taobao.com\" class=\"taobao web\" title=\"secondtest\"></a>\n5        <a href=\"#\"  id=\"show\" title=\"testlink\">\n6     </div>\n7   css:\n8      a[href^=http]{do something} //将会选择href属性以http开头的a标签\n复制代码\n\n\n26. 「 E[attr$=val] 」\n\n 这个选择器刚好跟E[attr^=val]相反，用来选择具有attr属性且属性值以val结尾的元素。\n\n复制代码\n1  html:\n2      <div id=\"demo\">\n3         <a href=\"\u001fhttp://zhangmengxue.com/header.png\" id=\"test\" title=\"test first\"></a>\n4         <a href=\"www.taobao.com/title.jpg\" class=\"taobao web\" title=\"secondtest\"></a>\n5         <a href=\"#\"  id=\"show\" title=\"testlink\">\n6      </div>\n7  css:\n8       a[href$=png]{do something} //将会选择href属性以png结尾的a标签\n```","tags":["CSS3"]},{"title":"Hello World","url":"/2017/06/13/hello-world/","content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n"}]